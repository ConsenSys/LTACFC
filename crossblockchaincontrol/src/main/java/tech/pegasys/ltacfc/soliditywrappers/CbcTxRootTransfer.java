package tech.pegasys.ltacfc.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.7.0-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CbcTxRootTransfer extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620034a9380380620034a9833981016040819052620000349162000066565b600091909155600b80546001600160a01b0390921661010002610100600160a81b0319909216919091179055620000a3565b6000806040838503121562000079578182fd5b825160208401519092506001600160a01b038116811462000098578182fd5b809150509250929050565b6133f680620000b36000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806378b546a2116100a2578063b4c3b75611610071578063b4c3b756146101ef578063d5d6b09c146101f7578063df1bba01146101ff578063f4c1ef2f14610212578063f830b7b4146102275761010b565b806378b546a214610196578063877ba01d146101a95780638e22d534146101c957806392b2c335146101dc5761010b565b806339ce107e116100de57806339ce107e1461015e578063439160df146101715780635c27d3071461017957806366b79f5a1461018e5761010b565b80631103c7b21461011057806323565ac5146101255780632af6cdf014610138578063336d5b0914610156575b600080fd5b61012361011e36600461290c565b61023a565b005b61012361013336600461294b565b61046d565b61014061049e565b60405161014d91906130f5565b60405180910390f35b6101406104a4565b61012361016c3660046128f2565b6104aa565b610140610531565b610181610537565b60405161014d9190612bd1565b6101406105c5565b6101236101a436600461290c565b6105cb565b6101bc6101b73660046129d3565b6105f9565b60405161014d9190612bc6565b6101406101d7366004612a8f565b61060e565b6101236101ea366004612a8f565b61064d565b6101bc6106ce565b6101406106d5565b61012361020d366004612ada565b6106db565b61021a610783565b60405161014d9190612be4565b6101406102353660046129d3565b610797565b600060608060001984016001600160401b038111801561025957600080fd5b5060405190808252806020026020018201604052801561028d57816020015b60608152602001906001900390816102785790505b50905060005b8481101561045a576102a361262c565b6102fe8787848181106102b257fe5b90506020028101906102c4919061332b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107a992505050565b600b5481516040808401516060850151608086015160a087015193516306e3dd6f60e11b81529697506101009095046001600160a01b031695630dc7bade9561034c959490916004016131fc565b60206040518083038186803b15801561036457600080fd5b505afa158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c91906129b3565b50816103c457805160608201516020830151919650906103bc90826109ce565b945050610451565b8051600054146103ef5760405162461bcd60e51b81526004016103e690612d48565b60405180910390fd5b80602001516001600160a01b0316306001600160a01b0316146104245760405162461bcd60e51b81526004016103e690612cb3565b61043681602001518260600151610a2d565b83600184038151811061044557fe5b60200260200101819052505b50600101610293565b50610466838383610a7f565b5050505050565b60008060608061047d8888610e71565b929650909450925090506104948483838989610ff1565b5050505050505050565b60035481565b60035490565b6001600160a01b03811660009081526009602052604090205460ff1661052e57600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0384169081179091556000908152600960205260409020805460ff191690911790555b50565b60005481565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105bd5780601f10610592576101008083540402835291602001916105bd565b820191906000526020600020905b8154815290600101906020018083116105a057829003601f168201915b505050505081565b60045490565b6000806060806105db8686610e71565b929650909450925090506105f184848484611201565b505050505050565b60026020526000908152604090205460ff1681565b600080606061061f8787878761145d565b9092509050811561063557600092505050610645565b610640816000611818565b925050505b949350505050565b6000606061065d8686868661145d565b9092509050816105f157610680816040518060200160405280600081525061187c565b6105f1577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66040516106b190612f82565b60405180910390a1600b805460ff19166001179055505050505050565b6003541590565b60045481565b3233146106fa5760405162461bcd60e51b81526004016103e690612fd5565b600084815260016020526040902054156107265760405162461bcd60e51b81526004016103e690613041565b600084815260016020526040908190204285019081905590517f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614249061077490879033908590889088906130fe565b60405180910390a15050505050565b600b5461010090046001600160a01b031681565b60016020526000908152604090205481565b6107b161262c565b60606107c46107bf846118a7565b6118ea565b905060006107ef6107e8836000815181106107db57fe5b60200260200101516119b2565b6000611818565b9050600061080b610806846001815181106107db57fe5b611a2d565b90506000610829610822856002815181106107db57fe5b6000611a34565b9050606061083d856003815181106107db57fe5b9050606061085e8660048151811061085157fe5b60200260200101516118ea565b905060606108728760058151811061085157fe5b905080518251146108955760405162461bcd60e51b81526004016103e690612e20565b606082516001600160401b03811180156108ae57600080fd5b506040519080825280602002602001820160405280156108d8578160200160208202803683370190505b509050606082516001600160401b03811180156108f457600080fd5b5060405190808252806020026020018201604052801561092857816020015b60608152602001906001900390816109135790505b50905060005b835181101561098f576109496107e88683815181106107db57fe5b83828151811061095557fe5b6020026020010181815250506109708482815181106107db57fe5b82828151811061097c57fe5b602090810291909101015260010161092e565b506040805160c0810182529889526001600160a01b0390971660208901529587019490945250506060840152608083015260a08201529150505b919050565b6060806109dd6107bf846118a7565b905060606109f1826001815181106107db57fe5b90506060610a20867fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80784611a7b565b9450505050505b92915050565b606080610a3c6107bf846118a7565b90506060610a50826001815181106107db57fe5b90506060610a20867fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f84611a7b565b6000610a8c836000611818565b90506000610a9b846020611818565b905060005b8351811015610e3f576000610ac9858381518110610aba57fe5b60200260200101516000611818565b9050808414610ad757600080fd5b6000610af7868481518110610ae857fe5b60200260200101516060611818565b90507f3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7816000801b6000898781518110610b2d57fe5b6020026020010151604051610b459493929190612bf8565b60405180910390a16000610b6c878581518110610b5e57fe5b602002602001015183611818565b90507f3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7816000801b60008a8881518110610ba257fe5b6020026020010151604051610bba9493929190612bf8565b60405180910390a160005b81811015610e2f576000610bf4898781518110610bde57fe5b6020026020010151836020028660200101611b98565b90507f3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c760008060001b838c8a81518110610c2a57fe5b6020026020010151604051610c429493929190612bf8565b60405180910390a16000819050806001600160a01b031663cf3090126040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc091906129b3565b610cc957600080fd5b8b816001600160a01b0316635384d8bd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0357600080fd5b505afa158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3b9190612a77565b14610d4557600080fd5b88816001600160a01b031663eda1824d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7f57600080fd5b505afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db79190612a77565b14610dc157600080fd5b60405163160f474960e01b81526001600160a01b0382169063160f474990610def908b151590600401612bc6565b600060405180830381600087803b158015610e0957600080fd5b505af1158015610e1d573d6000803e3d6000fd5b505060019094019350610bc592505050565b505060019092019150610aa09050565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec85836040516107749291906132ae565b60008060608060001985016001600160401b0381118015610e9157600080fd5b50604051908082528060200260200182016040528015610ec557816020015b6060815260200190600190039081610eb05790505b50905060005b85811015610fe757610edb61262c565b610eea8888848181106102b257fe5b600b5481516040808401516060850151608086015160a087015193516306e3dd6f60e11b81529697506101009095046001600160a01b031695630dc7bade95610f38959490916004016131fc565b60206040518083038186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8891906129b3565b5081610fb1578051602082015160608301519197509550610fa93082611ba0565b945050610fde565b610fc381602001518260600151610a2d565b836001840381518110610fd257fe5b60200260200101819052505b50600101610ecb565b5092959194509250565b3233146110105760405162461bcd60e51b81526004016103e690612fd5565b61101b846000611818565b600455600061102b856020611b98565b90506001600160a01b03811632146110555760405162461bcd60e51b81526004016103e690612c25565b6000611062866080611818565b9050600087600454868660405160200161107f9493929190612b8a565b60408051601f1981840301815291815281516020928301206000818152600290935291205490915060ff16156110c75760405162461bcd60e51b81526004016103e690612ea0565b6000819052600260205260606110df8860a085611bf2565b80519091506110f590600590602084019061266e565b508051602082012060038a905561110e600688886126fa565b5061114e88888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250611c93915050565b1561115d575050505050610466565b6000606061119e848a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611e4f92505050565b6004546040519294509092507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f916111e3919086908d908d90600a9089908990613147565b60405180910390a16111f3611fa3565b505050505050505050505050565b3233146112205760405162461bcd60e51b81526004016103e690613078565b83600054146112415760405162461bcd60e51b81526004016103e69061300a565b600054600355306001600160a01b0384161461126f5760405162461bcd60e51b81526004016103e690612ee4565b61127a826000611818565b6004819055600090815260016020526040902054806112ab5760405162461bcd60e51b81526004016103e690612c8a565b60018114156112cc5760405162461bcd60e51b81526004016103e690612c5c565b60028114156112ed5760405162461bcd60e51b81526004016103e690612e72565b8042111561130b576112fd612045565b611305611fa3565b50611457565b6000611318846020611b98565b90506001600160a01b03811632146113425760405162461bcd60e51b81526004016103e690612c25565b600061134f856080611818565b9050606061135f8660a084611bf2565b805190915061137590600590602084019061266e565b5080516020820120604080516001808252818301909252606091816020016020820280368337505081519192506113b491600691506020840190612735565b506113c0878284611c93565b156113d057505050505050611457565b60006113dc8483611e4f565b5090506113e881612097565b806113f45760026113f7565b60015b6004805460009081526001602052604090819020929092555490517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c8079161143f918490613137565b60405180910390a161144f611fa3565b505050505050505b50505050565b6007546008546000916060911061149c575050600b805460ff19166001908117909155600880548201905560408051602081019091526000815261180f565b6006546114bb5760405162461bcd60e51b81526004016103e690612d03565b6006546060906001600160401b03811180156114d657600080fd5b50604051908082528060200260200182016040528015611500578160200160208202803683370190505b50905060005b6006546000190181101561154b576006818154811061152157fe5b906000526020600020015482828151811061153857fe5b6020908102919091010152600101611506565b506008546001018160018351038151811061156257fe5b6020908102919091018101919091526005805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152600093849360609361160c93928301828280156116015780601f106115d657610100808354040283529160200191611601565b820191906000526020600020905b8154815290600101906020018083116115e457829003601f168201915b505050505085612132565b925092509250828a1415806116335750816001600160a01b0316896001600160a01b031614155b8061167c575061167a88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061187c915050565b155b1561170f576001600b60006101000a81548160ff0219169083151502179055507fa055e0edab905faf52d7d9c5d647017542eab38b9bb20a3d1c1cbe0554fa9626838b848c858d8d604051806020016040528060008152506040516116e89897969594939291906132bc565b60405180910390a1600160405180602001604052806000815250955095505050505061180f565b60088054600181019091556007805460609290811061172a57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156117b85780601f1061178d576101008083540402835291602001916117b8565b820191906000526020600020905b81548152906001019060200180831161179b57829003601f168201915b505050505090507fa055e0edab905faf52d7d9c5d647017542eab38b9bb20a3d1c1cbe0554fa9626848c858d868e8e886040516117fc9897969594939291906132bc565b60405180910390a1600096509450505050505b94509492505050565b60008160200183511015611873576040805162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e74323536290000604482015290519081900360640190fd5b50016020015190565b6000815183511461188f57506000610a27565b81805190602001208380519060200120149050610a27565b6118af61276f565b8151806118d157505060408051808201909152600080825260208201526109c9565b6040805180820190915260209384018152928301525090565b60606118f582612228565b6118fe57600080fd5b60006119098361224f565b9050806001600160401b038111801561192157600080fd5b5060405190808252806020026020018201604052801561195b57816020015b61194861276f565b8152602001906001900390816119405790505b509150611966612789565b61196f846122b3565b905060005b61197d826122ea565b156119aa5761198b82612309565b84828151811061199757fe5b6020908102919091010152600101611974565b505050919050565b60606119bd82612349565b6119c657600080fd5b6000806119d28461236f565b9092509050806001600160401b03811180156119ed57600080fd5b506040519080825280601f01601f191660200182016040528015611a18576020820181803683370190505b509250611a268284836123df565b5050919050565b6014015190565b60008060005b6020811015611a7357806008028582860181518110611a5557fe5b01602001516001600160f81b031916901c9190911790600101611a3a565b509392505050565b6060806060611a8c6107bf856118a7565b90506060611aa08260038151811061085157fe5b905060005b8151811015611b58576060611abf83838151811061085157fe5b90506000611ad6610806836000815181106107db57fe5b9050611ae88260018151811061085157fe5b9650611afa826002815181106107db57fe5b95506000611b1b88600081518110611b0e57fe5b602002602001015161241d565b90508981148015611b3d57508a6001600160a01b0316826001600160a01b0316145b15611b4d57505050505050611b90565b505050600101611aa5565b5060405162461bcd60e51b815260040180806020018281038252602581526020018061339c6025913960400191505060405180910390fd5b935093915050565b016020015190565b606080611baf6107bf846118a7565b90506060611bc3826001815181106107db57fe5b90506060610a20867f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b066142484611a7b565b606080826001600160401b0381118015611c0b57600080fd5b506040519080825280601f01601f191660200182016040528015611c36576020820181803683370190505b50905060005b83811015611c88578581860181518110611c5257fe5b602001015160f81c60f81b828281518110611c6957fe5b60200101906001600160f81b031916908160001a905350600101611c3c565b5090505b9392505050565b6000805b8451811015611e44576060858281518110611cae57fe5b602002602001015190506000611cc5826000611818565b90506000611cd4836020611a34565b90506000611ce3846040611818565b90506000611cf2856080611818565b90506000611d018660a0611818565b90506000611d0f8783611818565b90506060611d21888460200184611bf2565b90506000611d2f8987611818565b90506004548814611d525760405162461bcd60e51b81526004016103e690612f31565b868c14611d715760405162461bcd60e51b81526004016103e690612d7f565b8c60018e510381518110611d8157fe5b6020026020010151600014611d9557600080fd5b8c51811480611da757508c5160010181145b611dc35760405162461bcd60e51b81526004016103e6906130c0565b84611deb57611dd0612045565b611dd8611fa3565b60019a5050505050505050505050611c8c565b600780546001810182556000919091528251611e2e917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190602085019061266e565b505060019098019750611c979650505050505050565b506000949350505050565b600060606000806060611e628787612132565b9250925092506000548314611e895760405162461bcd60e51b81526004016103e690612dcc565b60006060836001600160a01b031683604051611ea59190612b6e565b6000604051808303816000865af19150503d8060008114611ee2576040519150601f19603f3d011682016040523d82523d6000602084013e611ee7565b606091505b50909250905081611f32577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6611f1c82612428565b604051611f299190612bd1565b60405180910390a15b60085460075414611f80576007546008546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b92611f739290916132ae565b60405180910390a1600091505b600b5460ff16611f905781611f93565b60005b96509450505050505b9250929050565b60046000905560036000905560056000611fbd91906127a9565b611fc9600660006127ed565b60005b600a5481101561201b5760096000600a8381548110611fe757fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff19169055600101611fcc565b50612028600a60006127ed565b6120346007600061280b565b6000600855600b805460ff19169055565b6004805460009081526001602052604080822060029055915491517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c8079261208d929091613137565b60405180910390a1565b60005b600a5481101561212e576000600a82815481106120b357fe5b60009182526020909120015460405163160f474960e01b81526001600160a01b039091169150819063160f4749906120ef908690600401612bc6565b600060405180830381600087803b15801561210957600080fd5b505af115801561211d573d6000803e3d6000fd5b50506001909301925061209a915050565b5050565b6000806060806121446107bf876118a7565b905060005b6001865103811015612181576121778287838151811061216557fe5b60200260200101518151811061085157fe5b9150600101612149565b506060612198828760018951038151811061216557fe5b90506121b7816000815181106121aa57fe5b6020026020010151612228565b156121cf576121cc8160008151811061085157fe5b90505b6121ec816000815181106121df57fe5b6020026020010151612488565b945061220b816001815181106121fe57fe5b60200260200101516124df565b935061221d816002815181106107db57fe5b925050509250925092565b600081602001516000141561223f575060006109c9565b50515160c060009190911a101590565b600061225a82612228565b612266575060006109c9565b81518051600090811a919061227a85612520565b6020860151908301915082016000190160005b8183116122a95761229d8361259e565b9092019160010161228d565b9695505050505050565b6122bb612789565b6122c482612228565b6122cd57600080fd5b60006122d883612520565b83519383529092016020820152919050565b60006122f461276f565b50508051602080820151915192015191011190565b61231161276f565b61231a826122ea565b1561010b576020820151600061232f8261259e565b8284526020808501829052920191840191909152506109c9565b6000816020015160001415612360575060006109c9565b50515160c060009190911a1090565b60008061237b83612349565b61238457600080fd5b8251805160001a9060808210156123a2579250600191506123da9050565b60b88210156123c057600185602001510392508060010193506123d7565b602085015182820160b51901945082900360b60192505b50505b915091565b6020601f820104836020840160005b8381101561240a576020810283810151908301526001016123ee565b5050505060008251602001830152505050565b6000610a2782612488565b606060448251101561246e575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526109c9565b60048201915081806020019051810190610a2791906129eb565b600061249382612349565b61249c57600080fd5b6000806124a88461236f565b909250905060208111156124bb57600080fd5b806124cb576000925050506109c9565b806020036101000a82510492505050919050565b60006124ea82612349565b6124f357600080fd5b6000806124ff8461236f565b90925090506014811461251157600080fd5b5051600160601b900492915050565b6000816020015160001415612537575060006109c9565b8151805160001a906080821015612553576000925050506109c9565b60b882108061256e575060c0821015801561256e575060f882105b1561257e576001925050506109c9565b60c0821015612593575060b5190190506109c9565b5060f5190192915050565b8051600090811a60808110156125b75760019150612626565b60b88110156125cc57607e1981019150612626565b60c08110156125f557600183015160b76020839003016101000a9004810160b519019150612626565b60f881101561260a5760be1981019150612626565b600183015160f76020839003016101000a9004810160f5190191505b50919050565b6040518060c001604052806000815260200160006001600160a01b03168152602001600080191681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826126a457600085556126ea565b82601f106126bd57805160ff19168380011785556126ea565b828001600101855582156126ea579182015b828111156126ea5782518255916020019190600101906126cf565b506126f6929150612829565b5090565b8280548282559060005260206000209081019282156126ea579160200282015b828111156126ea57823582559160200191906001019061271a565b8280548282559060005260206000209081019282156126ea57916020028201828111156126ea5782518255916020019190600101906126cf565b604051806040016040528060008152602001600081525090565b604051806040016040528061279c61276f565b8152602001600081525090565b50805460018160011615610100020316600290046000825580601f106127cf575061052e565b601f01602090049060005260206000209081019061052e9190612829565b508054600082559060005260206000209081019061052e9190612829565b508054600082559060005260206000209081019061052e919061283e565b5b808211156126f6576000815560010161282a565b808211156126f657600061285282826127a9565b5060010161283e565b80356001600160a01b03811681146109c957600080fd5b60008083601f840112612883578182fd5b5081356001600160401b03811115612899578182fd5b6020830191508360208083028501011115611f9c57600080fd5b60008083601f8401126128c4578182fd5b5081356001600160401b038111156128da578182fd5b602083019150836020828501011115611f9c57600080fd5b600060208284031215612903578081fd5b611c8c8261285b565b6000806020838503121561291e578081fd5b82356001600160401b03811115612933578182fd5b61293f85828601612872565b90969095509350505050565b60008060008060408587031215612960578182fd5b84356001600160401b0380821115612976578384fd5b61298288838901612872565b9096509450602087013591508082111561299a578384fd5b506129a787828801612872565b95989497509550505050565b6000602082840312156129c4578081fd5b81518015158114611c8c578182fd5b6000602082840312156129e4578081fd5b5035919050565b6000602082840312156129fc578081fd5b81516001600160401b0380821115612a12578283fd5b818401915084601f830112612a25578283fd5b815181811115612a3157fe5b604051601f8201601f191681016020018381118282101715612a4f57fe5b604052818152838201602001871015612a66578485fd5b6122a982602083016020870161336f565b600060208284031215612a88578081fd5b5051919050565b60008060008060608587031215612aa4578384fd5b84359350612ab46020860161285b565b925060408501356001600160401b03811115612ace578283fd5b6129a7878288016128b3565b60008060008060608587031215612aef578384fd5b843593506020850135925060408501356001600160401b03811115612ace578283fd5b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612b5a81602086016020860161336f565b601f01601f19169290920160200192915050565b60008251612b8081846020870161336f565b9190910192915050565b8481526020810184905260006001600160fb1b03831115612ba9578081fd5b602083028085604085013791909101604001908152949350505050565b901515815260200190565b600060208252611c8c6020830184612b42565b6001600160a01b0391909116815260200190565b600085825284602083015260018060a01b0384166040830152608060608301526122a96080830184612b42565b6020808252601e908201527f454f4120646f6573206e6f74206d61746368207374617274206576656e740000604082015260600190565b60208082526014908201527343616c6c20656e6465642028737563636573732960601b604082015260600190565b6020808252600f908201526e43616c6c206e6f742061637469766560881b604082015260600190565b60208082526030908201527f5365676d656e7420626c6f636b636861696e2043424320636f6e74726163742060408201526f776173206e6f742074686973206f6e6560801b606082015260800190565b60208082526025908201527f4163746976652043616c6c732063616c6c2070617468206c656e677468206973604082015264207a65726f60d81b606082015260800190565b6020808252601d908201527f4e6f742074686520636f727265637420626c6f636b636861696e206964000000604082015260600190565b6020808252602d908201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460408201526c040c8de40dcdee840dac2e8c6d609b1b606082015260800190565b60208082526034908201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616040820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b606082015260800190565b60208082526032908201527f4c656e677468206f662070726f6f664f66667365747320646f6573206e6f742060408201527136b0ba31b4103632b733ba3410383937b7b360711b606082015260800190565b60208082526014908201527343616c6c20656e64656420286661696c7572652960601b604082015260600190565b60208082526024908201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636040820152631d5d195960e21b606082015260800190565b6020808252602d908201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360408201526c206e6f742074686973206f6e6560981b606082015260800190565b60208082526031908201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206040820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b606082015260800190565b60208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527265637465642072657475726e2076616c75657360681b606082015260800190565b6020808252818101527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f41604082015260600190565b6020808252601f908201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e00604082015260600190565b6020808252601e908201527f5472616e73616374696f6e20616c726561647920726567697374657265640000604082015260600190565b60208082526028908201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626040820152677920616e20454f4160c01b606082015260800190565b6020808252818101527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e74604082015260600190565b90815260200190565b600086825260018060a01b03861660208301528460408301526080606083015261312c608083018486612b18565b979650505050505050565b9182521515602082015260400190565b60008882526020888184015260c060408401528660c084015260018060fb1b03871115613172578182fd5b808702808960e086013760e090840184810382016060860152875491810182905287845282842091849161010001905b808310156131cb5783546001600160a01b031682526001938401939290920191908401906131a2565b506131d96080870189612b12565b85810360a08701526131eb8188612b42565b9d9c50505050505050505050505050565b60008682526020868184015260a0604084015261321c60a0840187612b42565b8381036060850152855180825282870191830190845b8181101561324e57835183529284019291840191600101613232565b505084810360808601528551808252838201925083810282018401848801865b8381101561329c57601f1985840301865261328a838351612b42565b9587019592509086019060010161326e565b50909c9b505050505050505050505050565b918252602082015260400190565b888152602081018890526001600160a01b0387811660408301528616606082015260e0608082018190526000906132f590830187612b42565b82810360a0840152613308818688612b18565b905082810360c084015261331c8185612b42565b9b9a5050505050505050505050565b6000808335601e19843603018112613341578283fd5b8301803591506001600160401b0382111561335a578283fd5b602001915036819003821315611f9c57600080fd5b60005b8381101561338a578181015183820152602001613372565b83811115611457575050600091015256fe4e6f206576656e7420666f756e6420696e207472616e73616374696f6e2072656365697074a2646970667358221220109a9ca2af0d510d3a584833786d2aa7505c10f775624c9b89b30b77b99ad4e464736f6c63430007040033";

    public static final String FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "activeCallCrossBlockchainTransactionId";

    public static final String FUNC_ACTIVECALLGRAPH = "activeCallGraph";

    public static final String FUNC_ACTIVECALLROOTBLOCKCHAINID = "activeCallRootBlockchainId";

    public static final String FUNC_ADDTOLISTOFLOCKEDCONTRACTS = "addToListOfLockedContracts";

    public static final String FUNC_CROSSBLOCKCHAINCALL = "crossBlockchainCall";

    public static final String FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256 = "crossBlockchainCallReturnsUint256";

    public static final String FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "getActiveCallCrossBlockchainTransactionId";

    public static final String FUNC_GETACTIVECALLROOTBLOCKCHAINID = "getActiveCallRootBlockchainId";

    public static final String FUNC_ISSINGLEBLOCKCHAINCALL = "isSingleBlockchainCall";

    public static final String FUNC_MYBLOCKCHAINID = "myBlockchainId";

    public static final String FUNC_ROOT = "root";

    public static final String FUNC_ROOTTRANSACTIONINFORMATION = "rootTransactionInformation";

    public static final String FUNC_SEGMENT = "segment";

    public static final String FUNC_SEGMENTTRANSACTIONEXECUTED = "segmentTransactionExecuted";

    public static final String FUNC_SIGNALLING = "signalling";

    public static final String FUNC_START = "start";

    public static final String FUNC_TXRECEIPTROOTSTORAGE = "txReceiptRootStorage";

    public static final Event CALL_EVENT = new Event("Call", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CALLFAILURE_EVENT = new Event("CallFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DUMP_EVENT = new Event("Dump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NOTENOUGHCALLS_EVENT = new Event("NotEnoughCalls", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROOT_EVENT = new Event("Root", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SEGMENT_EVENT = new Event("Segment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SIGNALLING_EVENT = new Event("Signalling", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event START_EVENT = new Event("Start", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<CallEventResponse> getCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALL_EVENT, transactionReceipt);
        ArrayList<CallEventResponse> responses = new ArrayList<CallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallEventResponse typedResponse = new CallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._retVal = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallEventResponse> callEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallEventResponse>() {
            @Override
            public CallEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALL_EVENT, log);
                CallEventResponse typedResponse = new CallEventResponse();
                typedResponse.log = log;
                typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse._retVal = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallEventResponse> callEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALL_EVENT));
        return callEventFlowable(filter);
    }

    public List<CallFailureEventResponse> getCallFailureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLFAILURE_EVENT, transactionReceipt);
        ArrayList<CallFailureEventResponse> responses = new ArrayList<CallFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallFailureEventResponse typedResponse = new CallFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallFailureEventResponse>() {
            @Override
            public CallFailureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLFAILURE_EVENT, log);
                CallFailureEventResponse typedResponse = new CallFailureEventResponse();
                typedResponse.log = log;
                typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLFAILURE_EVENT));
        return callFailureEventFlowable(filter);
    }

    public List<DumpEventResponse> getDumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DUMP_EVENT, transactionReceipt);
        ArrayList<DumpEventResponse> responses = new ArrayList<DumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DumpEventResponse typedResponse = new DumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DumpEventResponse>() {
            @Override
            public DumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DUMP_EVENT, log);
                DumpEventResponse typedResponse = new DumpEventResponse();
                typedResponse.log = log;
                typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DUMP_EVENT));
        return dumpEventFlowable(filter);
    }

    public List<NotEnoughCallsEventResponse> getNotEnoughCallsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, transactionReceipt);
        ArrayList<NotEnoughCallsEventResponse> responses = new ArrayList<NotEnoughCallsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NotEnoughCallsEventResponse>() {
            @Override
            public NotEnoughCallsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, log);
                NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
                typedResponse.log = log;
                typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOTENOUGHCALLS_EVENT));
        return notEnoughCallsEventFlowable(filter);
    }

    public List<RootEventResponse> getRootEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOT_EVENT, transactionReceipt);
        ArrayList<RootEventResponse> responses = new ArrayList<RootEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootEventResponse typedResponse = new RootEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootEventResponse> rootEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RootEventResponse>() {
            @Override
            public RootEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOT_EVENT, log);
                RootEventResponse typedResponse = new RootEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootEventResponse> rootEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOT_EVENT));
        return rootEventFlowable(filter);
    }

    public List<SegmentEventResponse> getSegmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEGMENT_EVENT, transactionReceipt);
        ArrayList<SegmentEventResponse> responses = new ArrayList<SegmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SegmentEventResponse typedResponse = new SegmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SegmentEventResponse>() {
            @Override
            public SegmentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEGMENT_EVENT, log);
                SegmentEventResponse typedResponse = new SegmentEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEGMENT_EVENT));
        return segmentEventFlowable(filter);
    }

    public List<SignallingEventResponse> getSignallingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNALLING_EVENT, transactionReceipt);
        ArrayList<SignallingEventResponse> responses = new ArrayList<SignallingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignallingEventResponse typedResponse = new SignallingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignallingEventResponse>() {
            @Override
            public SignallingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNALLING_EVENT, log);
                SignallingEventResponse typedResponse = new SignallingEventResponse();
                typedResponse.log = log;
                typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNALLING_EVENT));
        return signallingEventFlowable(filter);
    }

    public List<StartEventResponse> getStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(START_EVENT, transactionReceipt);
        ArrayList<StartEventResponse> responses = new ArrayList<StartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartEventResponse typedResponse = new StartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StartEventResponse> startEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StartEventResponse>() {
            @Override
            public StartEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(START_EVENT, log);
                StartEventResponse typedResponse = new StartEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StartEventResponse> startEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(START_EVENT));
        return startEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<byte[]> activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public String getRLP_activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> segment(List<byte[]> _eventProofsEncoded, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_segment(List<byte[]> _eventProofsEncoded, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class CallEventResponse extends BaseEventResponse {
        public BigInteger _expectedBlockchainId;

        public BigInteger _actualBlockchainId;

        public String _expectedContract;

        public String _actualContract;

        public byte[] _expectedFunctionCall;

        public byte[] _actualFunctionCall;

        public byte[] _retVal;
    }

    public static class CallFailureEventResponse extends BaseEventResponse {
        public String _revertReason;
    }

    public static class DumpEventResponse extends BaseEventResponse {
        public BigInteger _val1;

        public byte[] _val2;

        public String _val3;

        public byte[] _val4;
    }

    public static class NotEnoughCallsEventResponse extends BaseEventResponse {
        public BigInteger _expectedNumberOfCalls;

        public BigInteger _actualNumberOfCalls;
    }

    public static class RootEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public Boolean _success;
    }

    public static class SegmentEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public byte[] _hashOfCallGraph;

        public List<BigInteger> _callPath;

        public List<String> _lockedContracts;

        public Boolean _success;

        public byte[] _returnValue;
    }

    public static class SignallingEventResponse extends BaseEventResponse {
        public BigInteger _rootBcId;

        public BigInteger _crossBlockchainTransactionId;
    }

    public static class StartEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public String _caller;

        public BigInteger _timeout;

        public byte[] _callGraph;
    }
}
