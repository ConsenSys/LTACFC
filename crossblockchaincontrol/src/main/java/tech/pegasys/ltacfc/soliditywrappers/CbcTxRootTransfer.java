package tech.pegasys.ltacfc.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.7.0-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CbcTxRootTransfer extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620033ab380380620033ab833981016040819052620000349162000066565b600091909155600b80546001600160a01b0390921661010002610100600160a81b0319909216919091179055620000a3565b6000806040838503121562000079578182fd5b825160208401519092506001600160a01b038116811462000098578182fd5b809150509250929050565b6132f880620000b36000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806378b546a2116100a2578063b4c3b75611610071578063b4c3b756146101ef578063d5d6b09c146101f7578063df1bba01146101ff578063f4c1ef2f14610212578063f830b7b4146102275761010b565b806378b546a214610196578063877ba01d146101a95780638e22d534146101c957806392b2c335146101dc5761010b565b80633cdc7104116100de5780633cdc71041461015e578063439160df146101715780635c27d3071461017957806366b79f5a1461018e5761010b565b80631103c7b2146101105780632af6cdf014610125578063336d5b091461014357806339ce107e1461014b575b600080fd5b61012361011e36600461275a565b61023a565b005b61012d61046d565b60405161013a9190612f4f565b60405180910390f35b61012d610473565b610123610159366004612739565b610479565b61012361016c3660046127e9565b610500565b61012d610656565b61018161065c565b60405161013a9190612a54565b61012d6106ea565b6101236101a436600461275a565b6106f0565b6101bc6101b73660046127b9565b61087b565b60405161013a9190612a49565b61012d6101d73660046128d2565b610890565b6101236101ea3660046128d2565b6108b7565b6101bc6108e9565b61012d6108f0565b61012361020d366004612929565b6108f6565b61021a61099e565b60405161013a9190612a67565b61012d6102353660046127b9565b6109b2565b600060608060001984016001600160401b038111801561025957600080fd5b5060405190808252806020026020018201604052801561028d57816020015b60608152602001906001900390816102785790505b50905060005b8481101561045a576102a36124a6565b6102fe8787848181106102b257fe5b90506020028101906102c4919061322d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109c492505050565b600b5481516040808401516060850151608086015160a087015193516306e3dd6f60e11b81529697506101009095046001600160a01b031695630dc7bade9561034c959490916004016130fe565b60206040518083038186803b15801561036457600080fd5b505afa158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c9190612799565b50816103c457805160608201516020830151919650906103bc9082610bd7565b945050610451565b8051600054146103ef5760405162461bcd60e51b81526004016103e690612be3565b60405180910390fd5b80602001516001600160a01b0316306001600160a01b0316146104245760405162461bcd60e51b81526004016103e690612b93565b61043681602001518260600151610c36565b83600184038151811061044557fe5b60200260200101819052505b50600101610293565b50610466838383610c88565b5050505050565b60035481565b60035490565b6001600160a01b03811660009081526009602052604090205460ff166104fd57600a805460018082019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0384169081179091556000908152600960205260409020805460ff191690911790555b50565b600b546040516306e3dd6f60e11b81526101009091046001600160a01b031690630dc7bade90610542908e908d908d908d908d908d908d908d90600401613031565b60206040518083038186803b15801561055a57600080fd5b505afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105929190612799565b5060608089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929350606092506105e591506105e090508361107a565b6110bd565b90506060610606826001815181106105f957fe5b6020026020010151611185565b90506106338e7f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b066142483611200565b9050809450505050506106488c82858561131d565b505050505050505050505050565b60005481565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106e25780601f106106b7576101008083540402835291602001916106e2565b820191906000526020600020905b8154815290600101906020018083116106c557829003601f168201915b505050505081565b60045490565b60008060608060001985016001600160401b038111801561071057600080fd5b5060405190808252806020026020018201604052801561074457816020015b606081526020019060019003908161072f5790505b50905060005b858110156108665761075a6124a6565b6107698888848181106102b257fe5b600b5481516040808401516060850151608086015160a087015193516306e3dd6f60e11b81529697506101009095046001600160a01b031695630dc7bade956107b7959490916004016130fe565b60206040518083038186803b1580156107cf57600080fd5b505afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190612799565b5081610830578051602082015160608301519197509550610828308261156e565b94505061085d565b61084281602001518260600151610c36565b83600184038151811061085157fe5b60200260200101819052505b5060010161074a565b50610873848484846115c0565b505050505050565b60026020526000908152604090205460ff1681565b600060606108a086868686611a3d565b90506108ad816000611d38565b9695505050505050565b60606108c585858585611a3d565b90506108e08160405180602001604052806000815250611d9c565b61046657600080fd5b6003541590565b60045481565b3233146109155760405162461bcd60e51b81526004016103e690612e64565b600084815260016020526040902054156109415760405162461bcd60e51b81526004016103e690612ed0565b600084815260016020526040908190204285019081905590517f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614249061098f9087903390859088908890612f58565b60405180910390a15050505050565b600b5461010090046001600160a01b031681565b60016020526000908152604090205481565b6109cc6124a6565b60606109da6105e08461107a565b905060006109f86109f1836000815181106105f957fe5b6000611d38565b90506000610a14610a0f846001815181106105f957fe5b611dc7565b90506000610a32610a2b856002815181106105f957fe5b6000611dce565b90506060610a46856003815181106105f957fe5b90506060610a6786600481518110610a5a57fe5b60200260200101516110bd565b90506060610a7b87600581518110610a5a57fe5b90508051825114610a9e5760405162461bcd60e51b81526004016103e690612cbb565b606082516001600160401b0381118015610ab757600080fd5b50604051908082528060200260200182016040528015610ae1578160200160208202803683370190505b509050606082516001600160401b0381118015610afd57600080fd5b50604051908082528060200260200182016040528015610b3157816020015b6060815260200190600190039081610b1c5790505b50905060005b8351811015610b9857610b526109f18683815181106105f957fe5b838281518110610b5e57fe5b602002602001018181525050610b798482815181106105f957fe5b828281518110610b8557fe5b6020908102919091010152600101610b37565b506040805160c0810182529889526001600160a01b0390971660208901529587019490945250506060840152608083015260a08201529150505b919050565b606080610be66105e08461107a565b90506060610bfa826001815181106105f957fe5b90506060610c29867fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80784611200565b9450505050505b92915050565b606080610c456105e08461107a565b90506060610c59826001815181106105f957fe5b90506060610c29867fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f84611200565b6000610c95836000611d38565b90506000610ca4846020611d38565b905060005b8351811015611048576000610cd2858381518110610cc357fe5b60200260200101516000611d38565b9050808414610ce057600080fd5b6000610d00868481518110610cf157fe5b60200260200101516060611d38565b90507f3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7816000801b6000898781518110610d3657fe5b6020026020010151604051610d4e9493929190612a7b565b60405180910390a16000610d75878581518110610d6757fe5b602002602001015183611d38565b90507f3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7816000801b60008a8881518110610dab57fe5b6020026020010151604051610dc39493929190612a7b565b60405180910390a160005b81811015611038576000610dfd898781518110610de757fe5b6020026020010151836020028660200101611e15565b90507f3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c760008060001b838c8a81518110610e3357fe5b6020026020010151604051610e4b9493929190612a7b565b60405180910390a16000819050806001600160a01b031663cf3090126040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec99190612799565b610ed257600080fd5b8b816001600160a01b0316635384d8bd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0c57600080fd5b505afa158015610f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4491906127d1565b14610f4e57600080fd5b88816001600160a01b031663eda1824d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8857600080fd5b505afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc091906127d1565b14610fca57600080fd5b60405163160f474960e01b81526001600160a01b0382169063160f474990610ff8908b151590600401612a49565b600060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505060019094019350610dce92505050565b505060019092019150610ca99050565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec858360405161098f9291906131b0565b6110826124e8565b8151806110a45750506040805180820190915260008082526020820152610bd2565b6040805180820190915260209384018152928301525090565b60606110c882611e1d565b6110d157600080fd5b60006110dc83611e44565b9050806001600160401b03811180156110f457600080fd5b5060405190808252806020026020018201604052801561112e57816020015b61111b6124e8565b8152602001906001900390816111135790505b509150611139612502565b61114284611e9e565b905060005b61115082611ed5565b1561117d5761115e82611ef4565b84828151811061116a57fe5b6020908102919091010152600101611147565b505050919050565b606061119082611f34565b61119957600080fd5b6000806111a584611f5a565b9092509050806001600160401b03811180156111c057600080fd5b506040519080825280601f01601f1916602001820160405280156111eb576020820181803683370190505b5092506111f9828483611fca565b5050919050565b60608060606112116105e08561107a565b9050606061122582600381518110610a5a57fe5b905060005b81518110156112dd576060611244838381518110610a5a57fe5b9050600061125b610a0f836000815181106105f957fe5b905061126d82600181518110610a5a57fe5b965061127f826002815181106105f957fe5b955060006112a08860008151811061129357fe5b6020026020010151612008565b905089811480156112c257508a6001600160a01b0316826001600160a01b0316145b156112d257505050505050611315565b50505060010161122a565b5060405162461bcd60e51b815260040180806020018281038252602581526020018061329e6025913960400191505060405180910390fd5b935093915050565b32331461133c5760405162461bcd60e51b81526004016103e690612e64565b611347836000611d38565b6004556000611357846020611e15565b90506001600160a01b03811632146113815760405162461bcd60e51b81526004016103e690612aa8565b600061138e856080611d38565b905060008660045486866040516020016113ab9493929190612a0d565b60408051601f1981840301815291815281516020928301206000818152600290935291205490915060ff16156113f35760405162461bcd60e51b81526004016103e690612d82565b60008190526002602052606061140b8760a085612013565b8051909150611421906005906020840190612522565b506003889055611433600687876125ae565b506000806060611476848a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506120b292505050565b925092509250600054831461149d5760405162461bcd60e51b81526004016103e690612c67565b60006060836001600160a01b0316836040516114b991906129f1565b6000604051808303816000865af19150503d80600081146114f6576040519150601f19603f3d011682016040523d82523d6000602084013e6114fb565b606091505b5080925081935050506000868051906020012090507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f600454828e8e600a888860405161154e9796959493929190612fa1565b60405180910390a161155e612173565b5050505050505050505050505050565b60608061157d6105e08461107a565b90506060611591826001815181106105f957fe5b90506060610c29867f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b066142484611200565b3233146115df5760405162461bcd60e51b81526004016103e690612f07565b83600054146116005760405162461bcd60e51b81526004016103e690612e99565b600054600355306001600160a01b0384161461162e5760405162461bcd60e51b81526004016103e690612dc6565b611639826000611d38565b60048190556000908152600160205260409020548061166a5760405162461bcd60e51b81526004016103e690612b0d565b600181141561168b5760405162461bcd60e51b81526004016103e690612adf565b60028114156116ac5760405162461bcd60e51b81526004016103e690612d54565b804211156116ca576116bc612215565b6116c4612173565b50611a37565b60006116d7846020611e15565b90506001600160a01b03811632146117015760405162461bcd60e51b81526004016103e690612aa8565b600061170e856080611d38565b9050606061171e8660a084612013565b8051909150611734906005906020840190612522565b508051602082012060005b86518110156118bb57606087828151811061175657fe5b60200260200101519050600061176d826000611d38565b9050600061177c836020611dce565b9050600061178b846040611d38565b9050600061179a856080611d38565b905060006117a98660a0611d38565b905060006117b78783611d38565b905060606117c9888460200184612013565b905060006117d78987611d38565b905060045488146117fa5760405162461bcd60e51b81526004016103e690612e13565b868b146118195760405162461bcd60e51b81526004016103e690612c1a565b806001146118395760405162461bcd60e51b81526004016103e690612b36565b8461186257611846612215565b61184e612173565b505050505050505050505050505050611a37565b6007805460018101825560009190915282516118a5917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801906020850190612522565b50506001909801975061173f9650505050505050565b506040805160018082528183019092526060916020808301908036833701905050905060008060606118ed86856120b2565b92509250925060005483146119145760405162461bcd60e51b81526004016103e690612c67565b6000826001600160a01b03168260405161192e91906129f1565b6000604051808303816000865af19150503d806000811461196b576040519150601f19603f3d011682016040523d82523d6000602084013e611970565b606091505b5050600854600754919250146119c2576007546008546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b926119b69290916131b0565b60405180910390a15060005b600b5460ff166119d257806119d5565b60005b90506119e081612267565b806119ec5760026119ef565b60015b6004805460009081526001602052604090819020929092555490517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c8079161154e918490612f91565b50505050565b60075460085460609111611a635760405162461bcd60e51b81526004016103e690612d0d565b6006546060906001016001600160401b0381118015611a8157600080fd5b50604051908082528060200260200182016040528015611aab578160200160208202803683370190505b50905060005b600654811015611af25760068181548110611ac857fe5b9060005260206000200154828281518110611adf57fe5b6020908102919091010152600101611ab1565b5060085460010181600183510381518110611b0957fe5b6020908102919091018101919091526005805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181526000938493606093611bb39392830182828015611ba85780601f10611b7d57610100808354040283529160200191611ba8565b820191906000526020600020905b815481529060010190602001808311611b8b57829003601f168201915b5050505050856120b2565b9250925092508289141580611bda5750816001600160a01b0316886001600160a01b031614155b80611c235750611c2187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611d9c915050565b155b15611c3657600b805460ff191660011790555b600880546001810190915560078054606092908110611c5157fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611cdf5780601f10611cb457610100808354040283529160200191611cdf565b820191906000526020600020905b815481529060010190602001808311611cc257829003601f168201915b505050505090507fa055e0edab905faf52d7d9c5d647017542eab38b9bb20a3d1c1cbe0554fa9626848b858c868d8d88604051611d239897969594939291906131be565b60405180910390a19998505050505050505050565b60008160200183511015611d93576040805162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e74323536290000604482015290519081900360640190fd5b50016020015190565b60008151835114611daf57506000610c30565b81805190602001208380519060200120149050610c30565b6014015190565b60008060005b6020811015611e0d57806008028582860181518110611def57fe5b01602001516001600160f81b031916901c9190911790600101611dd4565b509392505050565b016020015190565b6000816020015160001415611e3457506000610bd2565b50515160c060009190911a101590565b6000611e4f82611e1d565b611e5b57506000610bd2565b81518051600090811a9190611e6f85612302565b6020860151908301915082016000190160005b8183116108ad57611e9283612380565b90920191600101611e82565b611ea6612502565b611eaf82611e1d565b611eb857600080fd5b6000611ec383612302565b83519383529092016020820152919050565b6000611edf6124e8565b50508051602080820151915192015191011190565b611efc6124e8565b611f0582611ed5565b1561010b5760208201516000611f1a82612380565b828452602080850182905292019184019190915250610bd2565b6000816020015160001415611f4b57506000610bd2565b50515160c060009190911a1090565b600080611f6683611f34565b611f6f57600080fd5b8251805160001a906080821015611f8d57925060019150611fc59050565b60b8821015611fab5760018560200151039250806001019350611fc2565b602085015182820160b51901945082900360b60192505b50505b915091565b6020601f820104836020840160005b83811015611ff557602081028381015190830152600101611fd9565b5050505060008251602001830152505050565b6000610c308261240e565b606080826001600160401b038111801561202c57600080fd5b506040519080825280601f01601f191660200182016040528015612057576020820181803683370190505b50905060005b838110156120a957858186018151811061207357fe5b602001015160f81c60f81b82828151811061208a57fe5b60200101906001600160f81b031916908160001a90535060010161205d565b50949350505050565b6000806060806120c46105e08761107a565b905060005b6001865103811015612101576120f7828783815181106120e557fe5b602002602001015181518110610a5a57fe5b91506001016120c9565b50606061211882876001895103815181106120e557fe5b90506121378160008151811061212a57fe5b602002602001015161240e565b94506121568160018151811061214957fe5b6020026020010151612465565b9350612168816002815181106105f957fe5b925050509250925092565b6004600090556003600090556005600061218d91906125e9565b6121996006600061262d565b60005b600a548110156121eb5760096000600a83815481106121b757fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff1916905560010161219c565b506121f8600a600061262d565b6122046007600061264b565b6000600855600b805460ff19169055565b6004805460009081526001602052604080822060029055915491517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c8079261225d929091612f91565b60405180910390a1565b60005b600a548110156122fe576000600a828154811061228357fe5b60009182526020909120015460405163160f474960e01b81526001600160a01b039091169150819063160f4749906122bf908690600401612a49565b600060405180830381600087803b1580156122d957600080fd5b505af11580156122ed573d6000803e3d6000fd5b50506001909301925061226a915050565b5050565b600081602001516000141561231957506000610bd2565b8151805160001a90608082101561233557600092505050610bd2565b60b8821080612350575060c08210158015612350575060f882105b1561236057600192505050610bd2565b60c0821015612375575060b519019050610bd2565b5060f5190192915050565b8051600090811a60808110156123995760019150612408565b60b88110156123ae57607e1981019150612408565b60c08110156123d757600183015160b76020839003016101000a9004810160b519019150612408565b60f88110156123ec5760be1981019150612408565b600183015160f76020839003016101000a9004810160f5190191505b50919050565b600061241982611f34565b61242257600080fd5b60008061242e84611f5a565b9092509050602081111561244157600080fd5b8061245157600092505050610bd2565b806020036101000a82510492505050919050565b600061247082611f34565b61247957600080fd5b60008061248584611f5a565b90925090506014811461249757600080fd5b5051600160601b900492915050565b6040518060c001604052806000815260200160006001600160a01b03168152602001600080191681526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001600081525090565b60405180604001604052806125156124e8565b8152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612558576000855561259e565b82601f1061257157805160ff191683800117855561259e565b8280016001018555821561259e579182015b8281111561259e578251825591602001919060010190612583565b506125aa929150612669565b5090565b82805482825590600052602060002090810192821561259e579160200282015b8281111561259e5782358255916020019190600101906125ce565b50805460018160011615610100020316600290046000825580601f1061260f57506104fd565b601f0160209004906000526020600020908101906104fd9190612669565b50805460008255906000526020600020908101906104fd9190612669565b50805460008255906000526020600020908101906104fd919061267e565b5b808211156125aa576000815560010161266a565b808211156125aa57600061269282826125e9565b5060010161267e565b80356001600160a01b0381168114610bd257600080fd5b60008083601f8401126126c3578182fd5b5081356001600160401b038111156126d9578182fd5b60208301915083602080830285010111156126f357600080fd5b9250929050565b60008083601f84011261270b578182fd5b5081356001600160401b03811115612721578182fd5b6020830191508360208285010111156126f357600080fd5b60006020828403121561274a578081fd5b6127538261269b565b9392505050565b6000806020838503121561276c578081fd5b82356001600160401b03811115612781578182fd5b61278d858286016126b2565b90969095509350505050565b6000602082840312156127aa578081fd5b81518015158114612753578182fd5b6000602082840312156127ca578081fd5b5035919050565b6000602082840312156127e2578081fd5b5051919050565b600080600080600080600080600080600060e08c8e031215612809578687fd5b8b359a5061281960208d0161269b565b995060408c013598506001600160401b038060608e0135111561283a578788fd5b61284a8e60608f01358f016126fa565b909950975060808d013581101561285f578687fd5b61286f8e60808f01358f016126b2565b909750955060a08d0135811015612884578485fd5b6128948e60a08f01358f016126b2565b909550935060c08d01358110156128a9578283fd5b506128ba8d60c08e01358e016126b2565b81935080925050509295989b509295989b9093969950565b600080600080606085870312156128e7578384fd5b843593506128f76020860161269b565b925060408501356001600160401b03811115612911578283fd5b61291d878288016126fa565b95989497509550505050565b6000806000806060858703121561293e578384fd5b843593506020850135925060408501356001600160401b03811115612911578283fd5b81835260006001600160fb1b03831115612979578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526129dd816020860160208601613271565b601f01601f19169290920160200192915050565b60008251612a03818460208701613271565b9190910192915050565b8481526020810184905260006001600160fb1b03831115612a2c578081fd5b602083028085604085013791909101604001908152949350505050565b901515815260200190565b60006020825261275360208301846129c5565b6001600160a01b0391909116815260200190565b600085825284602083015260018060a01b0384166040830152608060608301526108ad60808301846129c5565b6020808252601e908201527f454f4120646f6573206e6f74206d61746368207374617274206576656e740000604082015260600190565b60208082526014908201527343616c6c20656e6465642028737563636573732960601b604082015260600190565b6020808252600f908201526e43616c6c206e6f742061637469766560881b604082015260600190565b6020808252603d908201527f43616c6c2070617468206c656e67746820666f72207365676d656e7420666f7260408201527f20726f6f74207472616e73616374696f6e206d757374206265206f6e65000000606082015260800190565b60208082526030908201527f5365676d656e7420626c6f636b636861696e2043424320636f6e74726163742060408201526f776173206e6f742074686973206f6e6560801b606082015260800190565b6020808252601d908201527f4e6f742074686520636f727265637420626c6f636b636861696e206964000000604082015260600190565b6020808252602d908201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460408201526c040c8de40dcdee840dac2e8c6d609b1b606082015260800190565b60208082526034908201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616040820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b606082015260800190565b60208082526032908201527f4c656e677468206f662070726f6f664f66667365747320646f6573206e6f742060408201527136b0ba31b4103632b733ba3410383937b7b360711b606082015260800190565b60208082526027908201527f43616c6c20746f2063726f73732063616c6c20776974686f75742072657475726040820152666e2076616c756560c81b606082015260800190565b60208082526014908201527343616c6c20656e64656420286661696c7572652960601b604082015260600190565b60208082526024908201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636040820152631d5d195960e21b606082015260800190565b6020808252602d908201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360408201526c206e6f742074686973206f6e6560981b606082015260800190565b60208082526031908201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206040820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b606082015260800190565b6020808252818101527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f41604082015260600190565b6020808252601f908201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e00604082015260600190565b6020808252601e908201527f5472616e73616374696f6e20616c726561647920726567697374657265640000604082015260600190565b60208082526028908201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626040820152677920616e20454f4160c01b606082015260800190565b90815260200190565b600086825260018060a01b038616602083015284604083015260806060830152612f8660808301848661299b565b979650505050505050565b9182521515602082015260400190565b60008882526020888184015260c06040840152612fc260c08401888a612961565b8381036060850152865480825287845282842091830190845b818110156130005783546001600160a01b031683526001938401939285019201612fdb565b505061300f6080860188612995565b84810360a086015261302181876129c5565b9c9b505050505050505050505050565b60008982526020898184015260a0604084015261305260a08401898b61299b565b838103606085015261306581888a612961565b848103608086015285815290508181018286028201830187855b888110156130ea57848303601f190184528135368b9003601e190181126130a4578788fd5b8a0180356001600160401b038111156130bb578889fd5b8036038c13156130c9578889fd5b6130d685828a850161299b565b95880195945050509085019060010161307f565b50909e9d5050505050505050505050505050565b60008682526020868184015260a0604084015261311e60a08401876129c5565b8381036060850152855180825282870191830190845b8181101561315057835183529284019291840191600101613134565b505084810360808601528551808252838201925083810282018401848801865b8381101561319e57601f1985840301865261318c8383516129c5565b95870195925090860190600101613170565b50909c9b505050505050505050505050565b918252602082015260400190565b888152602081018890526001600160a01b0387811660408301528616606082015260e0608082018190526000906131f7908301876129c5565b82810360a084015261320a81868861299b565b905082810360c084015261321e81856129c5565b9b9a5050505050505050505050565b6000808335601e19843603018112613243578283fd5b8301803591506001600160401b0382111561325c578283fd5b6020019150368190038213156126f357600080fd5b60005b8381101561328c578181015183820152602001613274565b83811115611a37575050600091015256fe4e6f206576656e7420666f756e6420696e207472616e73616374696f6e2072656365697074a264697066735822122011eee08bd052833b1af38377475dcebed8b23ab8264a0a5cd0f76303bc64ce2464736f6c63430007040033";

    public static final String FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "activeCallCrossBlockchainTransactionId";

    public static final String FUNC_ACTIVECALLGRAPH = "activeCallGraph";

    public static final String FUNC_ACTIVECALLROOTBLOCKCHAINID = "activeCallRootBlockchainId";

    public static final String FUNC_ADDTOLISTOFLOCKEDCONTRACTS = "addToListOfLockedContracts";

    public static final String FUNC_CROSSBLOCKCHAINCALL = "crossBlockchainCall";

    public static final String FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256 = "crossBlockchainCallReturnsUint256";

    public static final String FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "getActiveCallCrossBlockchainTransactionId";

    public static final String FUNC_GETACTIVECALLROOTBLOCKCHAINID = "getActiveCallRootBlockchainId";

    public static final String FUNC_ISSINGLEBLOCKCHAINCALL = "isSingleBlockchainCall";

    public static final String FUNC_MYBLOCKCHAINID = "myBlockchainId";

    public static final String FUNC_ROOT = "root";

    public static final String FUNC_ROOTTRANSACTIONINFORMATION = "rootTransactionInformation";

    public static final String FUNC_SEGMENT = "segment";

    public static final String FUNC_SEGMENTTRANSACTIONEXECUTED = "segmentTransactionExecuted";

    public static final String FUNC_SIGNALLING = "signalling";

    public static final String FUNC_START = "start";

    public static final String FUNC_TXRECEIPTROOTSTORAGE = "txReceiptRootStorage";

    public static final Event CALL_EVENT = new Event("Call", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event DUMP_EVENT = new Event("Dump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NOTENOUGHCALLS_EVENT = new Event("NotEnoughCalls", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROOT_EVENT = new Event("Root", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SEGMENT_EVENT = new Event("Segment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SIGNALLING_EVENT = new Event("Signalling", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event START_EVENT = new Event("Start", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<CallEventResponse> getCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALL_EVENT, transactionReceipt);
        ArrayList<CallEventResponse> responses = new ArrayList<CallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallEventResponse typedResponse = new CallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._retVal = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallEventResponse> callEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallEventResponse>() {
            @Override
            public CallEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALL_EVENT, log);
                CallEventResponse typedResponse = new CallEventResponse();
                typedResponse.log = log;
                typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse._retVal = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallEventResponse> callEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALL_EVENT));
        return callEventFlowable(filter);
    }

    public List<DumpEventResponse> getDumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DUMP_EVENT, transactionReceipt);
        ArrayList<DumpEventResponse> responses = new ArrayList<DumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DumpEventResponse typedResponse = new DumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DumpEventResponse>() {
            @Override
            public DumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DUMP_EVENT, log);
                DumpEventResponse typedResponse = new DumpEventResponse();
                typedResponse.log = log;
                typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DUMP_EVENT));
        return dumpEventFlowable(filter);
    }

    public List<NotEnoughCallsEventResponse> getNotEnoughCallsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, transactionReceipt);
        ArrayList<NotEnoughCallsEventResponse> responses = new ArrayList<NotEnoughCallsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NotEnoughCallsEventResponse>() {
            @Override
            public NotEnoughCallsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, log);
                NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
                typedResponse.log = log;
                typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOTENOUGHCALLS_EVENT));
        return notEnoughCallsEventFlowable(filter);
    }

    public List<RootEventResponse> getRootEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOT_EVENT, transactionReceipt);
        ArrayList<RootEventResponse> responses = new ArrayList<RootEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootEventResponse typedResponse = new RootEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootEventResponse> rootEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RootEventResponse>() {
            @Override
            public RootEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOT_EVENT, log);
                RootEventResponse typedResponse = new RootEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootEventResponse> rootEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOT_EVENT));
        return rootEventFlowable(filter);
    }

    public List<SegmentEventResponse> getSegmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEGMENT_EVENT, transactionReceipt);
        ArrayList<SegmentEventResponse> responses = new ArrayList<SegmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SegmentEventResponse typedResponse = new SegmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SegmentEventResponse>() {
            @Override
            public SegmentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEGMENT_EVENT, log);
                SegmentEventResponse typedResponse = new SegmentEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEGMENT_EVENT));
        return segmentEventFlowable(filter);
    }

    public List<SignallingEventResponse> getSignallingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNALLING_EVENT, transactionReceipt);
        ArrayList<SignallingEventResponse> responses = new ArrayList<SignallingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignallingEventResponse typedResponse = new SignallingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignallingEventResponse>() {
            @Override
            public SignallingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNALLING_EVENT, log);
                SignallingEventResponse typedResponse = new SignallingEventResponse();
                typedResponse.log = log;
                typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNALLING_EVENT));
        return signallingEventFlowable(filter);
    }

    public List<StartEventResponse> getStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(START_EVENT, transactionReceipt);
        ArrayList<StartEventResponse> responses = new ArrayList<StartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartEventResponse typedResponse = new StartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StartEventResponse> startEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StartEventResponse>() {
            @Override
            public StartEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(START_EVENT, log);
                StartEventResponse typedResponse = new StartEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StartEventResponse> startEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(START_EVENT));
        return startEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<byte[]> activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public String getRLP_activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> segment(BigInteger _rootBlockchainId, String _rootCBCContract, byte[] _startEventTxReceiptRoot, byte[] _encodedStartTxReceipt, List<BigInteger> _proofOffsets, List<byte[]> _proof, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_rootBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _rootCBCContract), 
                new org.web3j.abi.datatypes.generated.Bytes32(_startEventTxReceiptRoot), 
                new org.web3j.abi.datatypes.DynamicBytes(_encodedStartTxReceipt), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_proofOffsets, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_proof, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_segment(BigInteger _rootBlockchainId, String _rootCBCContract, byte[] _startEventTxReceiptRoot, byte[] _encodedStartTxReceipt, List<BigInteger> _proofOffsets, List<byte[]> _proof, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_rootBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _rootCBCContract), 
                new org.web3j.abi.datatypes.generated.Bytes32(_startEventTxReceiptRoot), 
                new org.web3j.abi.datatypes.DynamicBytes(_encodedStartTxReceipt), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_proofOffsets, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_proof, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class CallEventResponse extends BaseEventResponse {
        public BigInteger _expectedBlockchainId;

        public BigInteger _actualBlockchainId;

        public String _expectedContract;

        public String _actualContract;

        public byte[] _expectedFunctionCall;

        public byte[] _actualFunctionCall;

        public byte[] _retVal;
    }

    public static class DumpEventResponse extends BaseEventResponse {
        public BigInteger _val1;

        public byte[] _val2;

        public String _val3;

        public byte[] _val4;
    }

    public static class NotEnoughCallsEventResponse extends BaseEventResponse {
        public BigInteger _expectedNumberOfCalls;

        public BigInteger _actualNumberOfCalls;
    }

    public static class RootEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public Boolean _success;
    }

    public static class SegmentEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public byte[] _hashOfCallGraph;

        public List<BigInteger> _callPath;

        public List<String> _lockedContracts;

        public Boolean _success;

        public byte[] _returnValue;
    }

    public static class SignallingEventResponse extends BaseEventResponse {
        public BigInteger _rootBcId;

        public BigInteger _crossBlockchainTransactionId;
    }

    public static class StartEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public String _caller;

        public BigInteger _timeout;

        public byte[] _callGraph;
    }
}
