package tech.pegasys.ltacfc.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.7.0-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CbcTxRootTransfer extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200335f3803806200335f833981016040819052620000349162000066565b600091909155600a80546001600160a01b0390921661010002610100600160a81b0319909216919091179055620000a3565b6000806040838503121562000079578182fd5b825160208401519092506001600160a01b038116811462000098578182fd5b809150509250929050565b6132ac80620000b36000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806378b546a2116100a2578063b4c3b75611610071578063b4c3b756146101ef578063d5d6b09c146101f7578063df1bba01146101ff578063f4c1ef2f14610212578063f830b7b4146102275761010b565b806378b546a214610196578063877ba01d146101a95780638e22d534146101c957806392b2c335146101dc5761010b565b806339ce107e116100de57806339ce107e1461015e578063439160df146101715780635c27d3071461017957806366b79f5a1461018e5761010b565b80631103c7b21461011057806323565ac5146101255780632af6cdf014610138578063336d5b0914610156575b600080fd5b61012361011e3660046127bb565b61023a565b005b6101236101333660046127fa565b61046d565b61014061049e565b60405161014d9190612f77565b60405180910390f35b6101406104a4565b61012361016c3660046127a1565b6104aa565b610140610547565b61018161054d565b60405161014d9190612a80565b6101406105db565b6101236101a43660046127bb565b6105e1565b6101bc6101b7366004612882565b61060f565b60405161014d9190612a75565b6101406101d736600461293e565b610624565b6101236101ea36600461293e565b610663565b6101bc6106e4565b6101406106eb565b61012361020d366004612989565b6106f1565b61021a610799565b60405161014d9190612a93565b610140610235366004612882565b6107ad565b600060608060001984016001600160401b038111801561025957600080fd5b5060405190808252806020026020018201604052801561028d57816020015b60608152602001906001900390816102785790505b50905060005b8481101561045a576102a36124db565b6102fe8787848181106102b257fe5b90506020028101906102c491906131e1565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107bf92505050565b600a5481516040808401516060850151608086015160a087015193516306e3dd6f60e11b81529697506101009095046001600160a01b031695630dc7bade9561034c959490916004016130c7565b60206040518083038186803b15801561036457600080fd5b505afa158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c9190612862565b50816103c457805160608201516020830151919650906103bc90826109e4565b945050610451565b8051600054146103ef5760405162461bcd60e51b81526004016103e690612bca565b60405180910390fd5b80602001516001600160a01b0316306001600160a01b0316146104245760405162461bcd60e51b81526004016103e690612b35565b61043681602001518260600151610a43565b83600184038151811061044557fe5b60200260200101819052505b50600101610293565b50610466838383610a95565b5050505050565b60008060608061047d8888610d8b565b929650909450925090506104948483838989610f0b565b5050505050505050565b60035481565b60035490565b60005b6009548110156104f757816001600160a01b0316600982815481106104ce57fe5b6000918252602090912001546001600160a01b031614156104ef5750610544565b6001016104ad565b50600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0383161790555b50565b60005481565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105d35780601f106105a8576101008083540402835291602001916105d3565b820191906000526020600020905b8154815290600101906020018083116105b657829003601f168201915b505050505081565b60045490565b6000806060806105f18686610d8b565b929650909450925090506106078484848461111b565b505050505050565b60026020526000908152604090205460ff1681565b600080606061063587878787611377565b9092509050811561064b5760009250505061065b565b61065681600061171a565b925050505b949350505050565b6000606061067386868686611377565b90925090508161060757610696816040518060200160405280600081525061177e565b610607577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66040516106c790612e04565b60405180910390a1600a805460ff19166001179055505050505050565b6003541590565b60045481565b3233146107105760405162461bcd60e51b81526004016103e690612e57565b6000848152600160205260409020541561073c5760405162461bcd60e51b81526004016103e690612ec3565b600084815260016020526040908190204285019081905590517f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614249061078a9087903390859088908890612f80565b60405180910390a15050505050565b600a5461010090046001600160a01b031681565b60016020526000908152604090205481565b6107c76124db565b60606107da6107d5846117a9565b6117ec565b905060006108056107fe836000815181106107f157fe5b60200260200101516118b4565b600061171a565b9050600061082161081c846001815181106107f157fe5b61192f565b9050600061083f610838856002815181106107f157fe5b6000611936565b90506060610853856003815181106107f157fe5b905060606108748660048151811061086757fe5b60200260200101516117ec565b905060606108888760058151811061086757fe5b905080518251146108ab5760405162461bcd60e51b81526004016103e690612ca2565b606082516001600160401b03811180156108c457600080fd5b506040519080825280602002602001820160405280156108ee578160200160208202803683370190505b509050606082516001600160401b038111801561090a57600080fd5b5060405190808252806020026020018201604052801561093e57816020015b60608152602001906001900390816109295790505b50905060005b83518110156109a55761095f6107fe8683815181106107f157fe5b83828151811061096b57fe5b6020026020010181815250506109868482815181106107f157fe5b82828151811061099257fe5b6020908102919091010152600101610944565b506040805160c0810182529889526001600160a01b0390971660208901529587019490945250506060840152608083015260a08201529150505b919050565b6060806109f36107d5846117a9565b90506060610a07826001815181106107f157fe5b90506060610a36867fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c8078461197d565b9450505050505b92915050565b606080610a526107d5846117a9565b90506060610a66826001815181106107f157fe5b90506060610a36867fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f8461197d565b6000610aa283600061171a565b90506000610ab184602061171a565b905060005b8351811015610d59576000610adf858381518110610ad057fe5b6020026020010151600061171a565b9050808414610aed57600080fd5b6000610b0d868481518110610afe57fe5b6020026020010151606061171a565b90506000610b2e878581518110610b2057fe5b60200260200101518361171a565b905060005b81811015610d49576000610b62898781518110610b4c57fe5b6020026020010151836020028660200101611a9a565b90506000819050806001600160a01b031663cf3090126040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba257600080fd5b505afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda9190612862565b610be357600080fd5b8b816001600160a01b0316635384d8bd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c559190612926565b14610c5f57600080fd5b88816001600160a01b031663eda1824d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9957600080fd5b505afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612926565b14610cdb57600080fd5b60405163160f474960e01b81526001600160a01b0382169063160f474990610d09908b151590600401612a75565b600060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505060019094019350610b3392505050565b505060019092019150610ab69050565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec858360405161078a929190613179565b60008060608060001985016001600160401b0381118015610dab57600080fd5b50604051908082528060200260200182016040528015610ddf57816020015b6060815260200190600190039081610dca5790505b50905060005b85811015610f0157610df56124db565b610e048888848181106102b257fe5b600a5481516040808401516060850151608086015160a087015193516306e3dd6f60e11b81529697506101009095046001600160a01b031695630dc7bade95610e52959490916004016130c7565b60206040518083038186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea29190612862565b5081610ecb578051602082015160608301519197509550610ec38682611aa2565b945050610ef8565b610edd81602001518260600151610a43565b836001840381518110610eec57fe5b60200260200101819052505b50600101610de5565b5092959194509250565b323314610f2a5760405162461bcd60e51b81526004016103e690612e57565b610f3584600061171a565b6004556000610f45856020611a9a565b90506001600160a01b0381163214610f6f5760405162461bcd60e51b81526004016103e690612aa7565b6000610f7c86608061171a565b90506000876004548686604051602001610f999493929190612a39565b60408051601f1981840301815291815281516020928301206000818152600290935291205490915060ff1615610fe15760405162461bcd60e51b81526004016103e690612d22565b600081905260026020526060610ff98860a085611af4565b805190915061100f90600590602084019061251d565b508051602082012060038a9055611028600688886125a9565b5061106888888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250611b95915050565b15611077575050505050610466565b600060606110b8848a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611d5192505050565b6004546040519294509092507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f916110fd919086908d908d9060099089908990613012565b60405180910390a161110d611ea5565b505050505050505050505050565b32331461113a5760405162461bcd60e51b81526004016103e690612efa565b836000541461115b5760405162461bcd60e51b81526004016103e690612e8c565b600054600355306001600160a01b038416146111895760405162461bcd60e51b81526004016103e690612d66565b61119482600061171a565b6004819055600090815260016020526040902054806111c55760405162461bcd60e51b81526004016103e690612b0c565b60018114156111e65760405162461bcd60e51b81526004016103e690612ade565b60028114156112075760405162461bcd60e51b81526004016103e690612cf4565b8042111561122557611217611ef4565b61121f611ea5565b50611371565b6000611232846020611a9a565b90506001600160a01b038116321461125c5760405162461bcd60e51b81526004016103e690612aa7565b600061126985608061171a565b905060606112798660a084611af4565b805190915061128f90600590602084019061251d565b5080516020820120604080516001808252818301909252606091816020016020820280368337505081519192506112ce916006915060208401906125e4565b506112da878284611b95565b156112ea57505050505050611371565b60006112f68483611d51565b50905061130281611f46565b8061130e576002611311565b60015b6004805460009081526001602052604090819020929092555490517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80791611359918490613002565b60405180910390a1611369611ea5565b505050505050505b50505050565b600754600854600091606091106113b6575050600a805460ff191660019081179091556008805482019055604080516020810190915260008152611711565b6006546113d55760405162461bcd60e51b81526004016103e690612b85565b6006546060906001600160401b03811180156113f057600080fd5b5060405190808252806020026020018201604052801561141a578160200160208202803683370190505b50905060005b60065460001901811015611465576006818154811061143b57fe5b906000526020600020015482828151811061145257fe5b6020908102919091010152600101611420565b506008546001018160018351038151811061147c57fe5b6020908102919091018101919091526005805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181526000938493606093611526939283018282801561151b5780601f106114f05761010080835404028352916020019161151b565b820191906000526020600020905b8154815290600101906020018083116114fe57829003601f168201915b505050505085611fe1565b925092509250828a14158061154d5750816001600160a01b0316896001600160a01b031614155b80611596575061159488888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061177e915050565b155b1561161757600a805460ff191660019081179091556008805490910190556040517f8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15906115f09085908d9086908e9087908f908f90613187565b60405180910390a16001604051806020016040528060008152509550955050505050611711565b60088054600181019091556007805460609290811061163257fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156116c05780601f10611695576101008083540402835291602001916116c0565b820191906000526020600020905b8154815290600101906020018083116116a357829003601f168201915b505050505090507f971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef688b8b8b8b856040516116fe959493929190612fb9565b60405180910390a1600096509450505050505b94509492505050565b60008160200183511015611775576040805162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e74323536290000604482015290519081900360640190fd5b50016020015190565b6000815183511461179157506000610a3d565b81805190602001208380519060200120149050610a3d565b6117b161261e565b8151806117d357505060408051808201909152600080825260208201526109df565b6040805180820190915260209384018152928301525090565b60606117f7826120d7565b61180057600080fd5b600061180b836120fe565b9050806001600160401b038111801561182357600080fd5b5060405190808252806020026020018201604052801561185d57816020015b61184a61261e565b8152602001906001900390816118425790505b509150611868612638565b61187184612162565b905060005b61187f82612199565b156118ac5761188d826121b8565b84828151811061189957fe5b6020908102919091010152600101611876565b505050919050565b60606118bf826121f8565b6118c857600080fd5b6000806118d48461221e565b9092509050806001600160401b03811180156118ef57600080fd5b506040519080825280601f01601f19166020018201604052801561191a576020820181803683370190505b50925061192882848361228e565b5050919050565b6014015190565b60008060005b60208110156119755780600802858286018151811061195757fe5b01602001516001600160f81b031916901c919091179060010161193c565b509392505050565b606080606061198e6107d5856117a9565b905060606119a28260038151811061086757fe5b905060005b8151811015611a5a5760606119c183838151811061086757fe5b905060006119d861081c836000815181106107f157fe5b90506119ea8260018151811061086757fe5b96506119fc826002815181106107f157fe5b95506000611a1d88600081518110611a1057fe5b60200260200101516122cc565b90508981148015611a3f57508a6001600160a01b0316826001600160a01b0316145b15611a4f57505050505050611a92565b5050506001016119a7565b5060405162461bcd60e51b81526004018080602001828103825260258152602001806132526025913960400191505060405180910390fd5b935093915050565b016020015190565b606080611ab16107d5846117a9565b90506060611ac5826001815181106107f157fe5b90506060610a36867f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614248461197d565b606080826001600160401b0381118015611b0d57600080fd5b506040519080825280601f01601f191660200182016040528015611b38576020820181803683370190505b50905060005b83811015611b8a578581860181518110611b5457fe5b602001015160f81c60f81b828281518110611b6b57fe5b60200101906001600160f81b031916908160001a905350600101611b3e565b5090505b9392505050565b6000805b8451811015611d46576060858281518110611bb057fe5b602002602001015190506000611bc782600061171a565b90506000611bd6836020611936565b90506000611be584604061171a565b90506000611bf485608061171a565b90506000611c038660a061171a565b90506000611c11878361171a565b90506060611c23888460200184611af4565b90506000611c31898761171a565b90506004548814611c545760405162461bcd60e51b81526004016103e690612db3565b868c14611c735760405162461bcd60e51b81526004016103e690612c01565b8c60018e510381518110611c8357fe5b6020026020010151600014611c9757600080fd5b8c51811480611ca957508c5160010181145b611cc55760405162461bcd60e51b81526004016103e690612f42565b84611ced57611cd2611ef4565b611cda611ea5565b60019a5050505050505050505050611b8e565b600780546001810182556000919091528251611d30917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190602085019061251d565b505060019098019750611b999650505050505050565b506000949350505050565b600060606000806060611d648787611fe1565b9250925092506000548314611d8b5760405162461bcd60e51b81526004016103e690612c4e565b60006060836001600160a01b031683604051611da79190612a1d565b6000604051808303816000865af19150503d8060008114611de4576040519150601f19603f3d011682016040523d82523d6000602084013e611de9565b606091505b50909250905081611e34577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6611e1e826122d7565b604051611e2b9190612a80565b60405180910390a15b60085460075414611e82576007546008546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b92611e75929091613179565b60405180910390a1600091505b600a5460ff16611e925781611e95565b60005b96509450505050505b9250929050565b60046000905560036000905560056000611ebf9190612658565b611ecb6006600061269c565b611ed76009600061269c565b611ee3600760006126ba565b6000600855600a805460ff19169055565b6004805460009081526001602052604080822060029055915491517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80792611f3c929091613002565b60405180910390a1565b60005b600954811015611fdd57600060098281548110611f6257fe5b60009182526020909120015460405163160f474960e01b81526001600160a01b039091169150819063160f474990611f9e908690600401612a75565b600060405180830381600087803b158015611fb857600080fd5b505af1158015611fcc573d6000803e3d6000fd5b505060019093019250611f49915050565b5050565b600080606080611ff36107d5876117a9565b905060005b6001865103811015612030576120268287838151811061201457fe5b60200260200101518151811061086757fe5b9150600101611ff8565b506060612047828760018951038151811061201457fe5b90506120668160008151811061205957fe5b60200260200101516120d7565b1561207e5761207b8160008151811061086757fe5b90505b61209b8160008151811061208e57fe5b6020026020010151612337565b94506120ba816001815181106120ad57fe5b602002602001015161238e565b93506120cc816002815181106107f157fe5b925050509250925092565b60008160200151600014156120ee575060006109df565b50515160c060009190911a101590565b6000612109826120d7565b612115575060006109df565b81518051600090811a9190612129856123cf565b6020860151908301915082016000190160005b8183116121585761214c8361244d565b9092019160010161213c565b9695505050505050565b61216a612638565b612173826120d7565b61217c57600080fd5b6000612187836123cf565b83519383529092016020820152919050565b60006121a361261e565b50508051602080820151915192015191011190565b6121c061261e565b6121c982612199565b1561010b57602082015160006121de8261244d565b8284526020808501829052920191840191909152506109df565b600081602001516000141561220f575060006109df565b50515160c060009190911a1090565b60008061222a836121f8565b61223357600080fd5b8251805160001a906080821015612251579250600191506122899050565b60b882101561226f5760018560200151039250806001019350612286565b602085015182820160b51901945082900360b60192505b50505b915091565b6020601f820104836020840160005b838110156122b95760208102838101519083015260010161229d565b5050505060008251602001830152505050565b6000610a3d82612337565b606060448251101561231d575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526109df565b60048201915081806020019051810190610a3d919061289a565b6000612342826121f8565b61234b57600080fd5b6000806123578461221e565b9092509050602081111561236a57600080fd5b8061237a576000925050506109df565b806020036101000a82510492505050919050565b6000612399826121f8565b6123a257600080fd5b6000806123ae8461221e565b9092509050601481146123c057600080fd5b5051600160601b900492915050565b60008160200151600014156123e6575060006109df565b8151805160001a906080821015612402576000925050506109df565b60b882108061241d575060c0821015801561241d575060f882105b1561242d576001925050506109df565b60c0821015612442575060b5190190506109df565b5060f5190192915050565b8051600090811a608081101561246657600191506124d5565b60b881101561247b57607e19810191506124d5565b60c08110156124a457600183015160b76020839003016101000a9004810160b5190191506124d5565b60f88110156124b95760be19810191506124d5565b600183015160f76020839003016101000a9004810160f5190191505b50919050565b6040518060c001604052806000815260200160006001600160a01b03168152602001600080191681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826125535760008555612599565b82601f1061256c57805160ff1916838001178555612599565b82800160010185558215612599579182015b8281111561259957825182559160200191906001019061257e565b506125a59291506126d8565b5090565b828054828255906000526020600020908101928215612599579160200282015b828111156125995782358255916020019190600101906125c9565b828054828255906000526020600020908101928215612599579160200282018281111561259957825182559160200191906001019061257e565b604051806040016040528060008152602001600081525090565b604051806040016040528061264b61261e565b8152602001600081525090565b50805460018160011615610100020316600290046000825580601f1061267e5750610544565b601f01602090049060005260206000209081019061054491906126d8565b508054600082559060005260206000209081019061054491906126d8565b508054600082559060005260206000209081019061054491906126ed565b5b808211156125a557600081556001016126d9565b808211156125a55760006127018282612658565b506001016126ed565b80356001600160a01b03811681146109df57600080fd5b60008083601f840112612732578182fd5b5081356001600160401b03811115612748578182fd5b6020830191508360208083028501011115611e9e57600080fd5b60008083601f840112612773578182fd5b5081356001600160401b03811115612789578182fd5b602083019150836020828501011115611e9e57600080fd5b6000602082840312156127b2578081fd5b611b8e8261270a565b600080602083850312156127cd578081fd5b82356001600160401b038111156127e2578182fd5b6127ee85828601612721565b90969095509350505050565b6000806000806040858703121561280f578182fd5b84356001600160401b0380821115612825578384fd5b61283188838901612721565b90965094506020870135915080821115612849578384fd5b5061285687828801612721565b95989497509550505050565b600060208284031215612873578081fd5b81518015158114611b8e578182fd5b600060208284031215612893578081fd5b5035919050565b6000602082840312156128ab578081fd5b81516001600160401b03808211156128c1578283fd5b818401915084601f8301126128d4578283fd5b8151818111156128e057fe5b604051601f8201601f1916810160200183811182821017156128fe57fe5b604052818152838201602001871015612915578485fd5b612158826020830160208701613225565b600060208284031215612937578081fd5b5051919050565b60008060008060608587031215612953578384fd5b843593506129636020860161270a565b925060408501356001600160401b0381111561297d578283fd5b61285687828801612762565b6000806000806060858703121561299e578384fd5b843593506020850135925060408501356001600160401b0381111561297d578283fd5b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612a09816020860160208601613225565b601f01601f19169290920160200192915050565b60008251612a2f818460208701613225565b9190910192915050565b8481526020810184905260006001600160fb1b03831115612a58578081fd5b602083028085604085013791909101604001908152949350505050565b901515815260200190565b600060208252611b8e60208301846129f1565b6001600160a01b0391909116815260200190565b6020808252601e908201527f454f4120646f6573206e6f74206d61746368207374617274206576656e740000604082015260600190565b60208082526014908201527343616c6c20656e6465642028737563636573732960601b604082015260600190565b6020808252600f908201526e43616c6c206e6f742061637469766560881b604082015260600190565b60208082526030908201527f5365676d656e7420626c6f636b636861696e2043424320636f6e74726163742060408201526f776173206e6f742074686973206f6e6560801b606082015260800190565b60208082526025908201527f4163746976652043616c6c732063616c6c2070617468206c656e677468206973604082015264207a65726f60d81b606082015260800190565b6020808252601d908201527f4e6f742074686520636f727265637420626c6f636b636861696e206964000000604082015260600190565b6020808252602d908201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460408201526c040c8de40dcdee840dac2e8c6d609b1b606082015260800190565b60208082526034908201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616040820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b606082015260800190565b60208082526032908201527f4c656e677468206f662070726f6f664f66667365747320646f6573206e6f742060408201527136b0ba31b4103632b733ba3410383937b7b360711b606082015260800190565b60208082526014908201527343616c6c20656e64656420286661696c7572652960601b604082015260600190565b60208082526024908201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636040820152631d5d195960e21b606082015260800190565b6020808252602d908201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360408201526c206e6f742074686973206f6e6560981b606082015260800190565b60208082526031908201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206040820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b606082015260800190565b60208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527265637465642072657475726e2076616c75657360681b606082015260800190565b6020808252818101527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f41604082015260600190565b6020808252601f908201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e00604082015260600190565b6020808252601e908201527f5472616e73616374696f6e20616c726561647920726567697374657265640000604082015260600190565b60208082526028908201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626040820152677920616e20454f4160c01b606082015260800190565b6020808252818101527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e74604082015260600190565b90815260200190565b600086825260018060a01b038616602083015284604083015260806060830152612fae6080830184866129c7565b979650505050505050565b8581526001600160a01b0385166020820152608060408201819052600090612fe490830185876129c7565b8281036060840152612ff681856129f1565b98975050505050505050565b9182521515602082015260400190565b60008882526020888184015260c060408401528660c084015260018060fb1b0387111561303d578182fd5b808702808960e086013760e090840184810382016060860152875491810182905287845282842091849161010001905b808310156130965783546001600160a01b0316825260019384019392909201919084019061306d565b506130a460808701896129c1565b85810360a08701526130b681886129f1565b9d9c50505050505050505050505050565b60008682526020868184015260a060408401526130e760a08401876129f1565b8381036060850152855180825282870191830190845b81811015613119578351835292840192918401916001016130fd565b505084810360808601528551808252838201925083810282018401848801865b8381101561316757601f198584030186526131558383516129f1565b95870195925090860190600101613139565b50909c9b505050505050505050505050565b918252602082015260400190565b878152602081018790526001600160a01b0386811660408301528516606082015260c0608082018190526000906131c0908301866129f1565b82810360a08401526131d38185876129c7565b9a9950505050505050505050565b6000808335601e198436030181126131f7578283fd5b8301803591506001600160401b03821115613210578283fd5b602001915036819003821315611e9e57600080fd5b60005b83811015613240578181015183820152602001613228565b83811115611371575050600091015256fe4e6f206576656e7420666f756e6420696e207472616e73616374696f6e2072656365697074a2646970667358221220eb53489fbfb49c309a550bbdfe1cbad1191d842ead9d093a610b527d54b565e064736f6c63430007040033";

    public static final String FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "activeCallCrossBlockchainTransactionId";

    public static final String FUNC_ACTIVECALLGRAPH = "activeCallGraph";

    public static final String FUNC_ACTIVECALLROOTBLOCKCHAINID = "activeCallRootBlockchainId";

    public static final String FUNC_ADDTOLISTOFLOCKEDCONTRACTS = "addToListOfLockedContracts";

    public static final String FUNC_CROSSBLOCKCHAINCALL = "crossBlockchainCall";

    public static final String FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256 = "crossBlockchainCallReturnsUint256";

    public static final String FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "getActiveCallCrossBlockchainTransactionId";

    public static final String FUNC_GETACTIVECALLROOTBLOCKCHAINID = "getActiveCallRootBlockchainId";

    public static final String FUNC_ISSINGLEBLOCKCHAINCALL = "isSingleBlockchainCall";

    public static final String FUNC_MYBLOCKCHAINID = "myBlockchainId";

    public static final String FUNC_ROOT = "root";

    public static final String FUNC_ROOTTRANSACTIONINFORMATION = "rootTransactionInformation";

    public static final String FUNC_SEGMENT = "segment";

    public static final String FUNC_SEGMENTTRANSACTIONEXECUTED = "segmentTransactionExecuted";

    public static final String FUNC_SIGNALLING = "signalling";

    public static final String FUNC_START = "start";

    public static final String FUNC_TXRECEIPTROOTSTORAGE = "txReceiptRootStorage";

    public static final Event BADCALL_EVENT = new Event("BadCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CALLFAILURE_EVENT = new Event("CallFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event CALLRESULT_EVENT = new Event("CallResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event DUMP_EVENT = new Event("Dump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NOTENOUGHCALLS_EVENT = new Event("NotEnoughCalls", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROOT_EVENT = new Event("Root", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SEGMENT_EVENT = new Event("Segment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SIGNALLING_EVENT = new Event("Signalling", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event START_EVENT = new Event("Start", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BadCallEventResponse> getBadCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BADCALL_EVENT, transactionReceipt);
        ArrayList<BadCallEventResponse> responses = new ArrayList<BadCallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BadCallEventResponse typedResponse = new BadCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BadCallEventResponse>() {
            @Override
            public BadCallEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BADCALL_EVENT, log);
                BadCallEventResponse typedResponse = new BadCallEventResponse();
                typedResponse.log = log;
                typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BADCALL_EVENT));
        return badCallEventFlowable(filter);
    }

    public List<CallFailureEventResponse> getCallFailureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLFAILURE_EVENT, transactionReceipt);
        ArrayList<CallFailureEventResponse> responses = new ArrayList<CallFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallFailureEventResponse typedResponse = new CallFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallFailureEventResponse>() {
            @Override
            public CallFailureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLFAILURE_EVENT, log);
                CallFailureEventResponse typedResponse = new CallFailureEventResponse();
                typedResponse.log = log;
                typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLFAILURE_EVENT));
        return callFailureEventFlowable(filter);
    }

    public List<CallResultEventResponse> getCallResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLRESULT_EVENT, transactionReceipt);
        ArrayList<CallResultEventResponse> responses = new ArrayList<CallResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallResultEventResponse typedResponse = new CallResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallResultEventResponse>() {
            @Override
            public CallResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLRESULT_EVENT, log);
                CallResultEventResponse typedResponse = new CallResultEventResponse();
                typedResponse.log = log;
                typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLRESULT_EVENT));
        return callResultEventFlowable(filter);
    }

    public List<DumpEventResponse> getDumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DUMP_EVENT, transactionReceipt);
        ArrayList<DumpEventResponse> responses = new ArrayList<DumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DumpEventResponse typedResponse = new DumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DumpEventResponse>() {
            @Override
            public DumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DUMP_EVENT, log);
                DumpEventResponse typedResponse = new DumpEventResponse();
                typedResponse.log = log;
                typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DUMP_EVENT));
        return dumpEventFlowable(filter);
    }

    public List<NotEnoughCallsEventResponse> getNotEnoughCallsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, transactionReceipt);
        ArrayList<NotEnoughCallsEventResponse> responses = new ArrayList<NotEnoughCallsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NotEnoughCallsEventResponse>() {
            @Override
            public NotEnoughCallsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, log);
                NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
                typedResponse.log = log;
                typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOTENOUGHCALLS_EVENT));
        return notEnoughCallsEventFlowable(filter);
    }

    public List<RootEventResponse> getRootEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOT_EVENT, transactionReceipt);
        ArrayList<RootEventResponse> responses = new ArrayList<RootEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootEventResponse typedResponse = new RootEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootEventResponse> rootEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RootEventResponse>() {
            @Override
            public RootEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOT_EVENT, log);
                RootEventResponse typedResponse = new RootEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootEventResponse> rootEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOT_EVENT));
        return rootEventFlowable(filter);
    }

    public List<SegmentEventResponse> getSegmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEGMENT_EVENT, transactionReceipt);
        ArrayList<SegmentEventResponse> responses = new ArrayList<SegmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SegmentEventResponse typedResponse = new SegmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SegmentEventResponse>() {
            @Override
            public SegmentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEGMENT_EVENT, log);
                SegmentEventResponse typedResponse = new SegmentEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEGMENT_EVENT));
        return segmentEventFlowable(filter);
    }

    public List<SignallingEventResponse> getSignallingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNALLING_EVENT, transactionReceipt);
        ArrayList<SignallingEventResponse> responses = new ArrayList<SignallingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignallingEventResponse typedResponse = new SignallingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignallingEventResponse>() {
            @Override
            public SignallingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNALLING_EVENT, log);
                SignallingEventResponse typedResponse = new SignallingEventResponse();
                typedResponse.log = log;
                typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNALLING_EVENT));
        return signallingEventFlowable(filter);
    }

    public List<StartEventResponse> getStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(START_EVENT, transactionReceipt);
        ArrayList<StartEventResponse> responses = new ArrayList<StartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartEventResponse typedResponse = new StartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StartEventResponse> startEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StartEventResponse>() {
            @Override
            public StartEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(START_EVENT, log);
                StartEventResponse typedResponse = new StartEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StartEventResponse> startEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(START_EVENT));
        return startEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<byte[]> activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public String getRLP_activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> segment(List<byte[]> _eventProofsEncoded, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_segment(List<byte[]> _eventProofsEncoded, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BadCallEventResponse extends BaseEventResponse {
        public BigInteger _expectedBlockchainId;

        public BigInteger _actualBlockchainId;

        public String _expectedContract;

        public String _actualContract;

        public byte[] _expectedFunctionCall;

        public byte[] _actualFunctionCall;
    }

    public static class CallFailureEventResponse extends BaseEventResponse {
        public String _revertReason;
    }

    public static class CallResultEventResponse extends BaseEventResponse {
        public BigInteger _blockchainId;

        public String _contract;

        public byte[] _functionCall;

        public byte[] _result;
    }

    public static class DumpEventResponse extends BaseEventResponse {
        public BigInteger _val1;

        public byte[] _val2;

        public String _val3;

        public byte[] _val4;
    }

    public static class NotEnoughCallsEventResponse extends BaseEventResponse {
        public BigInteger _expectedNumberOfCalls;

        public BigInteger _actualNumberOfCalls;
    }

    public static class RootEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public Boolean _success;
    }

    public static class SegmentEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public byte[] _hashOfCallGraph;

        public List<BigInteger> _callPath;

        public List<String> _lockedContracts;

        public Boolean _success;

        public byte[] _returnValue;
    }

    public static class SignallingEventResponse extends BaseEventResponse {
        public BigInteger _rootBcId;

        public BigInteger _crossBlockchainTransactionId;
    }

    public static class StartEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public String _caller;

        public BigInteger _timeout;

        public byte[] _callGraph;
    }
}
