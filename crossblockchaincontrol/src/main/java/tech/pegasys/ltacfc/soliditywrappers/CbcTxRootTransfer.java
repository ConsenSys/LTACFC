package tech.pegasys.ltacfc.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.7.0-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CbcTxRootTransfer extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200337a3803806200337a833981016040819052620000349162000066565b600091909155600a80546001600160a01b0390921661010002610100600160a81b0319909216919091179055620000a3565b6000806040838503121562000079578182fd5b825160208401519092506001600160a01b038116811462000098578182fd5b809150509250929050565b6132c780620000b36000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806378b546a2116100a2578063b4c3b75611610071578063b4c3b756146101ef578063d5d6b09c146101f7578063df1bba01146101ff578063f4c1ef2f14610212578063f830b7b4146102275761010b565b806378b546a214610196578063877ba01d146101a95780638e22d534146101c957806392b2c335146101dc5761010b565b806339ce107e116100de57806339ce107e1461015e578063439160df146101715780635c27d3071461017957806366b79f5a1461018e5761010b565b80631103c7b21461011057806323565ac5146101255780632af6cdf014610138578063336d5b0914610156575b600080fd5b61012361011e3660046127c7565b61023a565b005b610123610133366004612806565b610473565b6101406104a4565b60405161014d9190612f83565b60405180910390f35b6101406104aa565b61012361016c3660046127ad565b6104b0565b61014061054d565b610181610553565b60405161014d9190612a8c565b6101406105e1565b6101236101a43660046127c7565b6105e7565b6101bc6101b736600461288e565b610615565b60405161014d9190612a81565b6101406101d736600461294a565b61062a565b6101236101ea36600461294a565b610669565b6101bc6106ea565b6101406106f1565b61012361020d366004612995565b6106f7565b61021a61079f565b60405161014d9190612a9f565b61014061023536600461288e565b6107b3565b600060608060001984016001600160401b038111801561025957600080fd5b5060405190808252806020026020018201604052801561028d57816020015b60608152602001906001900390816102785790505b50905060005b84811015610460576102a36124e7565b6102fe8787848181106102b257fe5b90506020028101906102c491906131fc565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107c592505050565b600a54815160208301516040808501516060860151608087015160a0880151935163917ede9960e01b81529798506101009096046001600160a01b03169663917ede99966103529695949091600401612fc5565b60206040518083038186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a2919061286e565b50816103ca57805160608201516020830151919650906103c290826109ea565b945050610457565b8051600054146103f55760405162461bcd60e51b81526004016103ec90612bd6565b60405180910390fd5b80602001516001600160a01b0316306001600160a01b03161461042a5760405162461bcd60e51b81526004016103ec90612b41565b61043c81602001518260600151610a49565b83600184038151811061044b57fe5b60200260200101819052505b50600101610293565b5061046c838383610a9b565b5050505050565b6000806060806104838888610d91565b9296509094509250905061049a8483838989610f17565b5050505050505050565b60035481565b60035490565b60005b6009548110156104fd57816001600160a01b0316600982815481106104d457fe5b6000918252602090912001546001600160a01b031614156104f5575061054a565b6001016104b3565b50600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0383161790555b50565b60005481565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105d95780601f106105ae576101008083540402835291602001916105d9565b820191906000526020600020905b8154815290600101906020018083116105bc57829003601f168201915b505050505081565b60045490565b6000806060806105f78686610d91565b9296509094509250905061060d84848484611127565b505050505050565b60026020526000908152604090205460ff1681565b600080606061063b87878787611383565b9092509050811561065157600092505050610661565b61065c816000611726565b925050505b949350505050565b6000606061067986868686611383565b90925090508161060d5761069c816040518060200160405280600081525061178a565b61060d577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66040516106cd90612e10565b60405180910390a1600a805460ff19166001179055505050505050565b6003541590565b60045481565b3233146107165760405162461bcd60e51b81526004016103ec90612e63565b600084815260016020526040902054156107425760405162461bcd60e51b81526004016103ec90612ecf565b600084815260016020526040908190204285019081905590517f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424906107909087903390859088908890612f8c565b60405180910390a15050505050565b600a5461010090046001600160a01b031681565b60016020526000908152604090205481565b6107cd6124e7565b60606107e06107db846117b5565b6117f8565b9050600061080b610804836000815181106107f757fe5b60200260200101516118c0565b6000611726565b90506000610827610822846001815181106107f757fe5b61193b565b9050600061084561083e856002815181106107f757fe5b6000611942565b90506060610859856003815181106107f757fe5b9050606061087a8660048151811061086d57fe5b60200260200101516117f8565b9050606061088e8760058151811061086d57fe5b905080518251146108b15760405162461bcd60e51b81526004016103ec90612cae565b606082516001600160401b03811180156108ca57600080fd5b506040519080825280602002602001820160405280156108f4578160200160208202803683370190505b509050606082516001600160401b038111801561091057600080fd5b5060405190808252806020026020018201604052801561094457816020015b606081526020019060019003908161092f5790505b50905060005b83518110156109ab576109656108048683815181106107f757fe5b83828151811061097157fe5b60200260200101818152505061098c8482815181106107f757fe5b82828151811061099857fe5b602090810291909101015260010161094a565b506040805160c0810182529889526001600160a01b0390971660208901529587019490945250506060840152608083015260a08201529150505b919050565b6060806109f96107db846117b5565b90506060610a0d826001815181106107f757fe5b90506060610a3c867fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80784611989565b9450505050505b92915050565b606080610a586107db846117b5565b90506060610a6c826001815181106107f757fe5b90506060610a3c867fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f84611989565b6000610aa8836000611726565b90506000610ab7846020611726565b905060005b8351811015610d5f576000610ae5858381518110610ad657fe5b60200260200101516000611726565b9050808414610af357600080fd5b6000610b13868481518110610b0457fe5b60200260200101516060611726565b90506000610b34878581518110610b2657fe5b602002602001015183611726565b905060005b81811015610d4f576000610b68898781518110610b5257fe5b6020026020010151836020028660200101611aa6565b90506000819050806001600160a01b031663cf3090126040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be0919061286e565b610be957600080fd5b8b816001600160a01b0316635384d8bd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2357600080fd5b505afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190612932565b14610c6557600080fd5b88816001600160a01b031663eda1824d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9f57600080fd5b505afa158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd79190612932565b14610ce157600080fd5b60405163160f474960e01b81526001600160a01b0382169063160f474990610d0f908b151590600401612a81565b600060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b505060019094019350610b3992505050565b505060019092019150610abc9050565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec8583604051610790929190613194565b60008060608060001985016001600160401b0381118015610db157600080fd5b50604051908082528060200260200182016040528015610de557816020015b6060815260200190600190039081610dd05790505b50905060005b85811015610f0d57610dfb6124e7565b610e0a8888848181106102b257fe5b600a54815160208301516040808501516060860151608087015160a0880151935163917ede9960e01b81529798506101009096046001600160a01b03169663917ede9996610e5e9695949091600401612fc5565b60206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae919061286e565b5081610ed7578051602082015160608301519197509550610ecf8682611aae565b945050610f04565b610ee981602001518260600151610a49565b836001840381518110610ef857fe5b60200260200101819052505b50600101610deb565b5092959194509250565b323314610f365760405162461bcd60e51b81526004016103ec90612e63565b610f41846000611726565b6004556000610f51856020611aa6565b90506001600160a01b0381163214610f7b5760405162461bcd60e51b81526004016103ec90612ab3565b6000610f88866080611726565b90506000876004548686604051602001610fa59493929190612a45565b60408051601f1981840301815291815281516020928301206000818152600290935291205490915060ff1615610fed5760405162461bcd60e51b81526004016103ec90612d2e565b6000819052600260205260606110058860a085611b00565b805190915061101b906005906020840190612529565b508051602082012060038a9055611034600688886125b5565b5061107488888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250611ba1915050565b1561108357505050505061046c565b600060606110c4848a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611d5d92505050565b6004546040519294509092507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f91611109919086908d908d90600990899089906130df565b60405180910390a1611119611eb1565b505050505050505050505050565b3233146111465760405162461bcd60e51b81526004016103ec90612f06565b83600054146111675760405162461bcd60e51b81526004016103ec90612e98565b600054600355306001600160a01b038416146111955760405162461bcd60e51b81526004016103ec90612d72565b6111a0826000611726565b6004819055600090815260016020526040902054806111d15760405162461bcd60e51b81526004016103ec90612b18565b60018114156111f25760405162461bcd60e51b81526004016103ec90612aea565b60028114156112135760405162461bcd60e51b81526004016103ec90612d00565b8042111561123157611223611f00565b61122b611eb1565b5061137d565b600061123e846020611aa6565b90506001600160a01b03811632146112685760405162461bcd60e51b81526004016103ec90612ab3565b6000611275856080611726565b905060606112858660a084611b00565b805190915061129b906005906020840190612529565b5080516020820120604080516001808252818301909252606091816020016020820280368337505081519192506112da916006915060208401906125f0565b506112e6878284611ba1565b156112f65750505050505061137d565b60006113028483611d5d565b50905061130e81611f52565b8061131a57600261131d565b60015b6004805460009081526001602052604090819020929092555490517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807916113659184906130cf565b60405180910390a1611375611eb1565b505050505050505b50505050565b600754600854600091606091106113c2575050600a805460ff19166001908117909155600880548201905560408051602081019091526000815261171d565b6006546113e15760405162461bcd60e51b81526004016103ec90612b91565b6006546060906001600160401b03811180156113fc57600080fd5b50604051908082528060200260200182016040528015611426578160200160208202803683370190505b50905060005b60065460001901811015611471576006818154811061144757fe5b906000526020600020015482828151811061145e57fe5b602090810291909101015260010161142c565b506008546001018160018351038151811061148857fe5b6020908102919091018101919091526005805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152600093849360609361153293928301828280156115275780601f106114fc57610100808354040283529160200191611527565b820191906000526020600020905b81548152906001019060200180831161150a57829003601f168201915b505050505085611fed565b925092509250828a1415806115595750816001600160a01b0316896001600160a01b031614155b806115a257506115a088888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061178a915050565b155b1561162357600a805460ff191660019081179091556008805490910190556040517f8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15906115fc9085908d9086908e9087908f908f906131a2565b60405180910390a1600160405180602001604052806000815250955095505050505061171d565b60088054600181019091556007805460609290811061163e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156116cc5780601f106116a1576101008083540402835291602001916116cc565b820191906000526020600020905b8154815290600101906020018083116116af57829003601f168201915b505050505090507f971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef688b8b8b8b8560405161170a959493929190613086565b60405180910390a1600096509450505050505b94509492505050565b60008160200183511015611781576040805162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e74323536290000604482015290519081900360640190fd5b50016020015190565b6000815183511461179d57506000610a43565b81805190602001208380519060200120149050610a43565b6117bd61262a565b8151806117df57505060408051808201909152600080825260208201526109e5565b6040805180820190915260209384018152928301525090565b6060611803826120e3565b61180c57600080fd5b60006118178361210a565b9050806001600160401b038111801561182f57600080fd5b5060405190808252806020026020018201604052801561186957816020015b61185661262a565b81526020019060019003908161184e5790505b509150611874612644565b61187d8461216e565b905060005b61188b826121a5565b156118b857611899826121c4565b8482815181106118a557fe5b6020908102919091010152600101611882565b505050919050565b60606118cb82612204565b6118d457600080fd5b6000806118e08461222a565b9092509050806001600160401b03811180156118fb57600080fd5b506040519080825280601f01601f191660200182016040528015611926576020820181803683370190505b50925061193482848361229a565b5050919050565b6014015190565b60008060005b60208110156119815780600802858286018151811061196357fe5b01602001516001600160f81b031916901c9190911790600101611948565b509392505050565b606080606061199a6107db856117b5565b905060606119ae8260038151811061086d57fe5b905060005b8151811015611a665760606119cd83838151811061086d57fe5b905060006119e4610822836000815181106107f757fe5b90506119f68260018151811061086d57fe5b9650611a08826002815181106107f757fe5b95506000611a2988600081518110611a1c57fe5b60200260200101516122d8565b90508981148015611a4b57508a6001600160a01b0316826001600160a01b0316145b15611a5b57505050505050611a9e565b5050506001016119b3565b5060405162461bcd60e51b815260040180806020018281038252602581526020018061326d6025913960400191505060405180910390fd5b935093915050565b016020015190565b606080611abd6107db846117b5565b90506060611ad1826001815181106107f757fe5b90506060610a3c867f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b066142484611989565b606080826001600160401b0381118015611b1957600080fd5b506040519080825280601f01601f191660200182016040528015611b44576020820181803683370190505b50905060005b83811015611b96578581860181518110611b6057fe5b602001015160f81c60f81b828281518110611b7757fe5b60200101906001600160f81b031916908160001a905350600101611b4a565b5090505b9392505050565b6000805b8451811015611d52576060858281518110611bbc57fe5b602002602001015190506000611bd3826000611726565b90506000611be2836020611942565b90506000611bf1846040611726565b90506000611c00856080611726565b90506000611c0f8660a0611726565b90506000611c1d8783611726565b90506060611c2f888460200184611b00565b90506000611c3d8987611726565b90506004548814611c605760405162461bcd60e51b81526004016103ec90612dbf565b868c14611c7f5760405162461bcd60e51b81526004016103ec90612c0d565b8c60018e510381518110611c8f57fe5b6020026020010151600014611ca357600080fd5b8c51811480611cb557508c5160010181145b611cd15760405162461bcd60e51b81526004016103ec90612f4e565b84611cf957611cde611f00565b611ce6611eb1565b60019a5050505050505050505050611b9a565b600780546001810182556000919091528251611d3c917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801906020850190612529565b505060019098019750611ba59650505050505050565b506000949350505050565b600060606000806060611d708787611fed565b9250925092506000548314611d975760405162461bcd60e51b81526004016103ec90612c5a565b60006060836001600160a01b031683604051611db39190612a29565b6000604051808303816000865af19150503d8060008114611df0576040519150601f19603f3d011682016040523d82523d6000602084013e611df5565b606091505b50909250905081611e40577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6611e2a826122e3565b604051611e379190612a8c565b60405180910390a15b60085460075414611e8e576007546008546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b92611e81929091613194565b60405180910390a1600091505b600a5460ff16611e9e5781611ea1565b60005b96509450505050505b9250929050565b60046000905560036000905560056000611ecb9190612664565b611ed7600660006126a8565b611ee3600960006126a8565b611eef600760006126c6565b6000600855600a805460ff19169055565b6004805460009081526001602052604080822060029055915491517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80792611f489290916130cf565b60405180910390a1565b60005b600954811015611fe957600060098281548110611f6e57fe5b60009182526020909120015460405163160f474960e01b81526001600160a01b039091169150819063160f474990611faa908690600401612a81565b600060405180830381600087803b158015611fc457600080fd5b505af1158015611fd8573d6000803e3d6000fd5b505060019093019250611f55915050565b5050565b600080606080611fff6107db876117b5565b905060005b600186510381101561203c576120328287838151811061202057fe5b60200260200101518151811061086d57fe5b9150600101612004565b506060612053828760018951038151811061202057fe5b90506120728160008151811061206557fe5b60200260200101516120e3565b1561208a576120878160008151811061086d57fe5b90505b6120a78160008151811061209a57fe5b6020026020010151612343565b94506120c6816001815181106120b957fe5b602002602001015161239a565b93506120d8816002815181106107f757fe5b925050509250925092565b60008160200151600014156120fa575060006109e5565b50515160c060009190911a101590565b6000612115826120e3565b612121575060006109e5565b81518051600090811a9190612135856123db565b6020860151908301915082016000190160005b8183116121645761215883612459565b90920191600101612148565b9695505050505050565b612176612644565b61217f826120e3565b61218857600080fd5b6000612193836123db565b83519383529092016020820152919050565b60006121af61262a565b50508051602080820151915192015191011190565b6121cc61262a565b6121d5826121a5565b1561010b57602082015160006121ea82612459565b8284526020808501829052920191840191909152506109e5565b600081602001516000141561221b575060006109e5565b50515160c060009190911a1090565b60008061223683612204565b61223f57600080fd5b8251805160001a90608082101561225d579250600191506122959050565b60b882101561227b5760018560200151039250806001019350612292565b602085015182820160b51901945082900360b60192505b50505b915091565b6020601f820104836020840160005b838110156122c5576020810283810151908301526001016122a9565b5050505060008251602001830152505050565b6000610a4382612343565b6060604482511015612329575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201526109e5565b60048201915081806020019051810190610a4391906128a6565b600061234e82612204565b61235757600080fd5b6000806123638461222a565b9092509050602081111561237657600080fd5b80612386576000925050506109e5565b806020036101000a82510492505050919050565b60006123a582612204565b6123ae57600080fd5b6000806123ba8461222a565b9092509050601481146123cc57600080fd5b5051600160601b900492915050565b60008160200151600014156123f2575060006109e5565b8151805160001a90608082101561240e576000925050506109e5565b60b8821080612429575060c08210158015612429575060f882105b15612439576001925050506109e5565b60c082101561244e575060b5190190506109e5565b5060f5190192915050565b8051600090811a608081101561247257600191506124e1565b60b881101561248757607e19810191506124e1565b60c08110156124b057600183015160b76020839003016101000a9004810160b5190191506124e1565b60f88110156124c55760be19810191506124e1565b600183015160f76020839003016101000a9004810160f5190191505b50919050565b6040518060c001604052806000815260200160006001600160a01b03168152602001600080191681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261255f57600085556125a5565b82601f1061257857805160ff19168380011785556125a5565b828001600101855582156125a5579182015b828111156125a557825182559160200191906001019061258a565b506125b19291506126e4565b5090565b8280548282559060005260206000209081019282156125a5579160200282015b828111156125a55782358255916020019190600101906125d5565b8280548282559060005260206000209081019282156125a557916020028201828111156125a557825182559160200191906001019061258a565b604051806040016040528060008152602001600081525090565b604051806040016040528061265761262a565b8152602001600081525090565b50805460018160011615610100020316600290046000825580601f1061268a575061054a565b601f01602090049060005260206000209081019061054a91906126e4565b508054600082559060005260206000209081019061054a91906126e4565b508054600082559060005260206000209081019061054a91906126f9565b5b808211156125b157600081556001016126e5565b808211156125b157600061270d8282612664565b506001016126f9565b80356001600160a01b03811681146109e557600080fd5b60008083601f84011261273e578182fd5b5081356001600160401b03811115612754578182fd5b6020830191508360208083028501011115611eaa57600080fd5b60008083601f84011261277f578182fd5b5081356001600160401b03811115612795578182fd5b602083019150836020828501011115611eaa57600080fd5b6000602082840312156127be578081fd5b611b9a82612716565b600080602083850312156127d9578081fd5b82356001600160401b038111156127ee578182fd5b6127fa8582860161272d565b90969095509350505050565b6000806000806040858703121561281b578182fd5b84356001600160401b0380821115612831578384fd5b61283d8883890161272d565b90965094506020870135915080821115612855578384fd5b506128628782880161272d565b95989497509550505050565b60006020828403121561287f578081fd5b81518015158114611b9a578182fd5b60006020828403121561289f578081fd5b5035919050565b6000602082840312156128b7578081fd5b81516001600160401b03808211156128cd578283fd5b818401915084601f8301126128e0578283fd5b8151818111156128ec57fe5b604051601f8201601f19168101602001838111828210171561290a57fe5b604052818152838201602001871015612921578485fd5b612164826020830160208701613240565b600060208284031215612943578081fd5b5051919050565b6000806000806060858703121561295f578384fd5b8435935061296f60208601612716565b925060408501356001600160401b03811115612989578283fd5b6128628782880161276e565b600080600080606085870312156129aa578384fd5b843593506020850135925060408501356001600160401b03811115612989578283fd5b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612a15816020860160208601613240565b601f01601f19169290920160200192915050565b60008251612a3b818460208701613240565b9190910192915050565b8481526020810184905260006001600160fb1b03831115612a64578081fd5b602083028085604085013791909101604001908152949350505050565b901515815260200190565b600060208252611b9a60208301846129fd565b6001600160a01b0391909116815260200190565b6020808252601e908201527f454f4120646f6573206e6f74206d61746368207374617274206576656e740000604082015260600190565b60208082526014908201527343616c6c20656e6465642028737563636573732960601b604082015260600190565b6020808252600f908201526e43616c6c206e6f742061637469766560881b604082015260600190565b60208082526030908201527f5365676d656e7420626c6f636b636861696e2043424320636f6e74726163742060408201526f776173206e6f742074686973206f6e6560801b606082015260800190565b60208082526025908201527f4163746976652043616c6c732063616c6c2070617468206c656e677468206973604082015264207a65726f60d81b606082015260800190565b6020808252601d908201527f4e6f742074686520636f727265637420626c6f636b636861696e206964000000604082015260600190565b6020808252602d908201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460408201526c040c8de40dcdee840dac2e8c6d609b1b606082015260800190565b60208082526034908201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616040820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b606082015260800190565b60208082526032908201527f4c656e677468206f662070726f6f664f66667365747320646f6573206e6f742060408201527136b0ba31b4103632b733ba3410383937b7b360711b606082015260800190565b60208082526014908201527343616c6c20656e64656420286661696c7572652960601b604082015260600190565b60208082526024908201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636040820152631d5d195960e21b606082015260800190565b6020808252602d908201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360408201526c206e6f742074686973206f6e6560981b606082015260800190565b60208082526031908201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206040820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b606082015260800190565b60208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527265637465642072657475726e2076616c75657360681b606082015260800190565b6020808252818101527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f41604082015260600190565b6020808252601f908201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e00604082015260600190565b6020808252601e908201527f5472616e73616374696f6e20616c726561647920726567697374657265640000604082015260600190565b60208082526028908201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626040820152677920616e20454f4160c01b606082015260800190565b6020808252818101527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e74604082015260600190565b90815260200190565b600086825260018060a01b038616602083015284604083015260806060830152612fba6080830184866129d3565b979650505050505050565b6000878252602060018060a01b0388168184015286604084015260c06060840152612ff360c08401876129fd565b8381036080850152855180825282870191830190845b8181101561302557835183529284019291840191600101613009565b505084810360a08601528551808252838201925083810282018401848801865b8381101561307357601f198584030186526130618383516129fd565b95870195925090860190600101613045565b50909d9c50505050505050505050505050565b8581526001600160a01b03851660208201526080604082018190526000906130b190830185876129d3565b82810360608401526130c381856129fd565b98975050505050505050565b9182521515602082015260400190565b60008882526020888184015260c060408401528660c084015260018060fb1b0387111561310a578182fd5b808702808960e086013760e090840184810382016060860152875491810182905287845282842091849161010001905b808310156131635783546001600160a01b0316825260019384019392909201919084019061313a565b5061317160808701896129cd565b85810360a087015261318381886129fd565b9d9c50505050505050505050505050565b918252602082015260400190565b878152602081018790526001600160a01b0386811660408301528516606082015260c0608082018190526000906131db908301866129fd565b82810360a08401526131ee8185876129d3565b9a9950505050505050505050565b6000808335601e19843603018112613212578283fd5b8301803591506001600160401b0382111561322b578283fd5b602001915036819003821315611eaa57600080fd5b60005b8381101561325b578181015183820152602001613243565b8381111561137d575050600091015256fe4e6f206576656e7420666f756e6420696e207472616e73616374696f6e2072656365697074a2646970667358221220c42a1627f510a3860fd1a60bcbd2302d2f206e4ca01332016f0cec4d079e4c8664736f6c63430007040033";

    public static final String FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "activeCallCrossBlockchainTransactionId";

    public static final String FUNC_ACTIVECALLGRAPH = "activeCallGraph";

    public static final String FUNC_ACTIVECALLROOTBLOCKCHAINID = "activeCallRootBlockchainId";

    public static final String FUNC_ADDTOLISTOFLOCKEDCONTRACTS = "addToListOfLockedContracts";

    public static final String FUNC_CROSSBLOCKCHAINCALL = "crossBlockchainCall";

    public static final String FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256 = "crossBlockchainCallReturnsUint256";

    public static final String FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID = "getActiveCallCrossBlockchainTransactionId";

    public static final String FUNC_GETACTIVECALLROOTBLOCKCHAINID = "getActiveCallRootBlockchainId";

    public static final String FUNC_ISSINGLEBLOCKCHAINCALL = "isSingleBlockchainCall";

    public static final String FUNC_MYBLOCKCHAINID = "myBlockchainId";

    public static final String FUNC_ROOT = "root";

    public static final String FUNC_ROOTTRANSACTIONINFORMATION = "rootTransactionInformation";

    public static final String FUNC_SEGMENT = "segment";

    public static final String FUNC_SEGMENTTRANSACTIONEXECUTED = "segmentTransactionExecuted";

    public static final String FUNC_SIGNALLING = "signalling";

    public static final String FUNC_START = "start";

    public static final String FUNC_TXRECEIPTROOTSTORAGE = "txReceiptRootStorage";

    public static final Event BADCALL_EVENT = new Event("BadCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CALLFAILURE_EVENT = new Event("CallFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event CALLRESULT_EVENT = new Event("CallResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event DUMP_EVENT = new Event("Dump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NOTENOUGHCALLS_EVENT = new Event("NotEnoughCalls", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROOT_EVENT = new Event("Root", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SEGMENT_EVENT = new Event("Segment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SIGNALLING_EVENT = new Event("Signalling", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event START_EVENT = new Event("Start", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CbcTxRootTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BadCallEventResponse> getBadCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BADCALL_EVENT, transactionReceipt);
        ArrayList<BadCallEventResponse> responses = new ArrayList<BadCallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BadCallEventResponse typedResponse = new BadCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BadCallEventResponse>() {
            @Override
            public BadCallEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BADCALL_EVENT, log);
                BadCallEventResponse typedResponse = new BadCallEventResponse();
                typedResponse.log = log;
                typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BADCALL_EVENT));
        return badCallEventFlowable(filter);
    }

    public List<CallFailureEventResponse> getCallFailureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLFAILURE_EVENT, transactionReceipt);
        ArrayList<CallFailureEventResponse> responses = new ArrayList<CallFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallFailureEventResponse typedResponse = new CallFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallFailureEventResponse>() {
            @Override
            public CallFailureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLFAILURE_EVENT, log);
                CallFailureEventResponse typedResponse = new CallFailureEventResponse();
                typedResponse.log = log;
                typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLFAILURE_EVENT));
        return callFailureEventFlowable(filter);
    }

    public List<CallResultEventResponse> getCallResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLRESULT_EVENT, transactionReceipt);
        ArrayList<CallResultEventResponse> responses = new ArrayList<CallResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallResultEventResponse typedResponse = new CallResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallResultEventResponse>() {
            @Override
            public CallResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLRESULT_EVENT, log);
                CallResultEventResponse typedResponse = new CallResultEventResponse();
                typedResponse.log = log;
                typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLRESULT_EVENT));
        return callResultEventFlowable(filter);
    }

    public List<DumpEventResponse> getDumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DUMP_EVENT, transactionReceipt);
        ArrayList<DumpEventResponse> responses = new ArrayList<DumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DumpEventResponse typedResponse = new DumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DumpEventResponse>() {
            @Override
            public DumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DUMP_EVENT, log);
                DumpEventResponse typedResponse = new DumpEventResponse();
                typedResponse.log = log;
                typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DUMP_EVENT));
        return dumpEventFlowable(filter);
    }

    public List<NotEnoughCallsEventResponse> getNotEnoughCallsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, transactionReceipt);
        ArrayList<NotEnoughCallsEventResponse> responses = new ArrayList<NotEnoughCallsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NotEnoughCallsEventResponse>() {
            @Override
            public NotEnoughCallsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, log);
                NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
                typedResponse.log = log;
                typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOTENOUGHCALLS_EVENT));
        return notEnoughCallsEventFlowable(filter);
    }

    public List<RootEventResponse> getRootEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOT_EVENT, transactionReceipt);
        ArrayList<RootEventResponse> responses = new ArrayList<RootEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootEventResponse typedResponse = new RootEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootEventResponse> rootEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RootEventResponse>() {
            @Override
            public RootEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOT_EVENT, log);
                RootEventResponse typedResponse = new RootEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootEventResponse> rootEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOT_EVENT));
        return rootEventFlowable(filter);
    }

    public List<SegmentEventResponse> getSegmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEGMENT_EVENT, transactionReceipt);
        ArrayList<SegmentEventResponse> responses = new ArrayList<SegmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SegmentEventResponse typedResponse = new SegmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SegmentEventResponse>() {
            @Override
            public SegmentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEGMENT_EVENT, log);
                SegmentEventResponse typedResponse = new SegmentEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEGMENT_EVENT));
        return segmentEventFlowable(filter);
    }

    public List<SignallingEventResponse> getSignallingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNALLING_EVENT, transactionReceipt);
        ArrayList<SignallingEventResponse> responses = new ArrayList<SignallingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignallingEventResponse typedResponse = new SignallingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignallingEventResponse>() {
            @Override
            public SignallingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNALLING_EVENT, log);
                SignallingEventResponse typedResponse = new SignallingEventResponse();
                typedResponse.log = log;
                typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNALLING_EVENT));
        return signallingEventFlowable(filter);
    }

    public List<StartEventResponse> getStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(START_EVENT, transactionReceipt);
        ArrayList<StartEventResponse> responses = new ArrayList<StartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartEventResponse typedResponse = new StartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StartEventResponse> startEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StartEventResponse>() {
            @Override
            public StartEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(START_EVENT, log);
                StartEventResponse typedResponse = new StartEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StartEventResponse> startEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(START_EVENT));
        return startEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<byte[]> activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public String getRLP_activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallCrossBlockchainTransactionId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLCROSSBLOCKCHAINTRANSACTIONID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_getActiveCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_root(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<BigInteger> rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public String getRLP_rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> segment(List<byte[]> _eventProofsEncoded, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_segment(List<byte[]> _eventProofsEncoded, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<Boolean> segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public String getRLP_segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_signalling(List<byte[]> _eventProofsEncoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventProofsEncoded, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<TransactionReceipt> start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public String getRLP_start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    public RemoteFunctionCall<String> txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public String getRLP_txReceiptRootStorage() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TXRECEIPTROOTSTORAGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return org.web3j.abi.FunctionEncoder.encode(function);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CbcTxRootTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CbcTxRootTransfer(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CbcTxRootTransfer> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _txReceiptRootStorage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _txReceiptRootStorage)));
        return deployRemoteCall(CbcTxRootTransfer.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BadCallEventResponse extends BaseEventResponse {
        public BigInteger _expectedBlockchainId;

        public BigInteger _actualBlockchainId;

        public String _expectedContract;

        public String _actualContract;

        public byte[] _expectedFunctionCall;

        public byte[] _actualFunctionCall;
    }

    public static class CallFailureEventResponse extends BaseEventResponse {
        public String _revertReason;
    }

    public static class CallResultEventResponse extends BaseEventResponse {
        public BigInteger _blockchainId;

        public String _contract;

        public byte[] _functionCall;

        public byte[] _result;
    }

    public static class DumpEventResponse extends BaseEventResponse {
        public BigInteger _val1;

        public byte[] _val2;

        public String _val3;

        public byte[] _val4;
    }

    public static class NotEnoughCallsEventResponse extends BaseEventResponse {
        public BigInteger _expectedNumberOfCalls;

        public BigInteger _actualNumberOfCalls;
    }

    public static class RootEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public Boolean _success;
    }

    public static class SegmentEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public byte[] _hashOfCallGraph;

        public List<BigInteger> _callPath;

        public List<String> _lockedContracts;

        public Boolean _success;

        public byte[] _returnValue;
    }

    public static class SignallingEventResponse extends BaseEventResponse {
        public BigInteger _rootBcId;

        public BigInteger _crossBlockchainTransactionId;
    }

    public static class StartEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public String _caller;

        public BigInteger _timeout;

        public byte[] _callGraph;
    }
}
